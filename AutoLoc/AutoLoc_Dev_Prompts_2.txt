Classes: managers module classes:

    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:

    - AppManager class:
        - The AppManager manages the app's startup functionalities and runs its initialize_app() function at its initialization. 
        
        - The __init__ function defines the following variables before running the initialize_app():

            - app_data_path = "[Host OS User Data Directory]AutoLoc/Data"

            - app_db_file_path = app_data_path/"DB/"

            - initialize_app() function call 


        - The AppManager defines and executes the following functions and functionalities:

            - initialize_app() function that checks and ensures of the following:
                - This function checks if the app_data_path exists, otherwise it creates it. It then checks if the app_db_file exists, otherwise it creates it as an SQLite DB file. The [Host OS User Data Directory] represents any OS (Windows, Mac, and Linux) user data directory. The function runs as the first startup procedure in any host OS anytime the app is started. 
                This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class if there is any Exception/Error preventing the above procedures.

            - get_app_data_path() function to return the app_data_path. This function raises the appropriate exception error from error_manager module.

            - get_app_db_file_path() function to return the app_db_file_path. This function raises the appropriate exception error from error_manager module.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed in the MainAppWindow class that will call this class and its functions.
    




    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:


    - DBManager class:
        - The DBManager handles all DB related functionalities of the app.
        - It uses the AppManager class to get the app_db_file_path to use for the creation of the "autoloc.db" SQLite file. 
        - It executes the following at its initialization:

            - Gets the app_db_file_path from the AppManager.get_app_db_file_path(), establish connections to the DB and other necessary priliminaries. 

            - Runs the create_db() function that creates the SQLite DB "autoloc.db" inside the app_db_file_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class.

            - Runs the create_tables() function that creates the default tables of the DB. This function raises the appropriate exception error from error_manager module. 

            - Runs the insert_records() function that inserts all default table records in the DB. This function raises the appropriate exception error from error_manager module.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed later in a QWidget class that will call this class and its functions.

        - Creates the following tables if not exist in the create_tables() function:

            - ui_modes:
                - id (primary key, autoincrement)
                - mode ("Light Mode" or "Dark Mode" - default = Light Mode)

            
            - l10n_settings:
                - id (primary key, autoincrement)
                - html_is_duplicated (True, False, default=False)
                - key_format ("Simple Key", "Namespaced Key with File Path")
            
            - app_settings: 
                - id (primary key, autoincrement)
                - dark_mode (Boolean: True/False)
                - duplicate_html (Boolean: True/False)
                - use_key_namespace (Boolean: True/False)
            Note: app_settings always has only one record. It should never have more than one record. 


            - locales:
                - id (primary key, autoincrement)
                - name (English (United States))
                - code (en-US)
                - UNIQUE(name, code)
            

            - projects:
                - id (primary key, autoincrement)
                - name
                - unique_id (hidden field, autogenerated in code logic)
                - client
                - description
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress"
                - start_date
                - end_date
                - last_updated_date
                - lead_egineer 
                - UNIQUE(name, client, unique_id)


            - source_codes:
                - id (primary key, autoincrement)
                - project_id
                - name
                - unique_id (hidden field, autogenerated in code logic using datetime as "YYYYMMDDHis")
                - type (Web, Android, iOS, Java App)
                - source_locale (ja-JP, en-US, zh-CN)
                - original_source_code_path (Nullable and hidden field to be set by the SourceCodeManager class later)
                - commons_paths (Nullable and hidden field to be set by the SourceCodeManager class later)
                - localized_source_code_path (Nullable and hidden field to be set by the SourceCodeManager class later)
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress" 
                - notes (Nullable and optional)
                - UNIQUE(project_id, name, unique_id, source_locale)
                - FOREIGN KEY(project_id) REFERENCES projects(id)
            

            - target_locales:
                - id (primary key, autoincrement)
                - name
                - code
                - source_code_id
                - UNIQUE(name, code, source_code_id)
                - FOREIGN KEY(source_code_id) REFERENCES source_codes(id)
            

        - Inserts the following records in the insert_records() function:
            - ui_modes = [
                ('Light Mode'),
                ('Dark Mode')
            ]

            - l10n_settings = [
                ('False'),
                ('Simple Key')
            ]

            - locales = [
                ('Japanese', 'ja-JP'),
                ('English (US)', 'en-US'),
                ('Simplified Chinese (CN)', 'zh-CN'),
                ('Traditional Chinese (TW)', 'zh-TW'),
                ('Korean (South Korea)', 'ko-KR')
            ]
        
        - Defines the reset_db() function to delete and recreate the DB file, the tables, and the default records. This function raises the appropriate exception error from error_manager module.

        - Defines the following functions for general data management of any table in the DB:

            - get_record() to get any record from any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - get_records() to get all records from any table in a list. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - insert_record() to insert any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class. 

            - update_record() to update any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_record() to delete any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_records() to delete all records in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.
        
    



    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:


    - SettingManager class:
        - The SettingManager uses the DBManager to define and execute all its CRUD functionalities. It defines and manages the CRUD functionality for the app_settings tables in the DB using the DBManager methods.

        - It creates and manages the following functions and functionalities:

            - update_app_settings() function to update the columns of the app_settings table.  

            - reset_db() function called from the DBManager to execute its logic. This function is just a wrapper function for the DBManager's reset_db() function. 

            - get_locales() to get all the locales from the locales table. This function raises the appropriate exception error from error_manager module.

            - get_locale() to get any specific locale from the locales table. This function raises the appropriate exception error from error_manager module.

            - add_locale() to add a new locale record to the locales table. This function raises the appropriate exception error from error_manager module.

            - update_locale() to update any locale record in the locales table. This function raises the appropriate exception error from error_manager module.

            - delete_locale() to delete any locale record in the locales table. This function raises the appropriate exception error from error_manager module.

            _ delete_locales() to delete all locales in the locales table. This function raises the appropriate exception error from error_manager module.

            - get_file_types() to get all the file_types from the file_types table. This function raises the appropriate exception error from error_manager module.

            - get_file_type() to get any specific file_type from the file_types table. This function raises the appropriate exception error from error_manager module.

            - add_file_type() to add a new file_type record to the file_types table. This function raises the appropriate exception error from error_manager module.

            - update_file_type() to update any file_type record in the file_types table. This function raises the appropriate exception error from error_manager module.

            - delete_file_type() to delete any file_type record in the file_types table. This function raises the appropriate exception error from error_manager module.

            _ delete_file_types() to delete all file_types in the file_types table. This function raises the appropriate exception error from error_manager module.

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.





    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:


    - ProjectManager class:
        - It manages all the projects in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the projects table in the DB.

        - It defines and execute the following functions and functionalities:

            - get_projects() to get all the projects from the projects table. This function raises the appropriate exception error from error_manager module. 

            - get_project() to get any specific project from the projects table. This function raises the appropriate exception error from error_manager module. 

            - add_project() to add a new project record to the projects table. This function raises the appropriate exception error from error_manager module. 

            - update_project() to update any project record in the projects table. This function raises the appropriate exception error from error_manager module.  

            - delete_project() to delete any project record from the projects table. This function raises the appropriate exception error from error_manager module. 

            _ delete_projects() to delete all projects from the projects table. This function raises the appropriate exception error from error_manager module.  

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.






    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:


    - SourceCodeManager class:
        - It manages all the source codes in the AutoLoc app.

        - It uses the AppManager to get the app_data_path to store its files. 

        - It uses the DBManager to define and execute all CRUD functionalities for the source_codes and target_locales tables in the DB.

        - It takes in project_id argument at initialization.

        - It defines the following in its __init__ function:
            
            - app_data_path = app_manager.get_app_data_path()

            - original_source_code_path = Null (to assign them later by add_source_code_files())

            - localized_source_code_path = Null (to assign them later by add_source_code_files())

        - It defines and execute the following functions and functionalities:

            - get_source_codes() to get and return all the source_codes of a specific project from the source_codes table. This function raises the appropriate exception error from error_manager module. 

            - get_source_code() to get and return any specific source_code from the source_codes table. This function raises the appropriate exception error from error_manager module.

            - get_source_locale() to get and return the source_code source locale from the source_code's record. This function raises the appropriate exception error from error_manager module.

            - add_source_code() to add and return a new source_code record for a specific project to the source_codes table. 
            This function raises the appropriate exception error from error_manager module. 

            - update_source_code() to update and return any source_code record of a specific project in the source_codes table.
            This function raises the appropriate exception error from error_manager module. 

            - delete_source_code() to delete and return any source_code record of a specific project from the source_codes table. It also calls delete_source_code_files() function to delete the source_code's files in the original_source_code_path and localized_source_code_path. This function raises the appropriate exception error from error_manager module. 

            _ delete_source_codes() to delete and return all source_codes of a specific project from the source_codes table. It also calls delete_source_code_files() function to delete the source_code's files in the original_source_code_path and localized_source_code_path for each source code. This function raises the appropriate exception error from error_manager module.

            - add_source_code_files(source_code_id, upload_path) funtion to copy and save all the files from the upload_path starting the copied file paths from the last folder of the upload_path into the original_source_code_path.
            This function performs the following functionalities:
                - It generates unique_id using a private function `_generate_unique_id()` as used in the ProjectManager class.
                - It creates and assigns the following class variables:
                    - original_source_code_path = app_data_path/"[Project_Unique_ID]/[Source_Code_Unique_ID]/Original_Files/"
                    - localized_source_code_path = app_data_path/"[Project_Unique_ID]/[Source_Code_Unique_ID]/Localized_Files/"
                    - Note:
                        - the [Project_Unique_ID]= Parent Project's Unique ID
                        - the [Source_Code_Unique_ID]= this Source Code's Unique ID 
                - It then updates the source_code record in the DB using its ID parameter passed to update_source_code() function to update the source code's original_source_code_path and localized_source_code_path columns.
                - It then copies all the contents of the original_source_code_path to the localized_source_code_path.    
            This function raises the appropriate exception error from error_manager module.

            - update_source_code_files(source_code_id, upload_path) funtion to copy and save all the files from the upload_path starting the copied file paths from the last folder of the upload_path into the original_source_code_path after deleting the old source code files in the source code's original_source_code_path using the delete_source_code_files() function.
                
            This function raises the appropriate exception error from error_manager module.

            - delete_source_code_files(source_code_id) funtion to delete all the files from the source code's original_source_code_path and localized_source_code_path.
                
            This function raises the appropriate exception error from error_manager module.

            - get_original_source_code_path() function to get and return a specific project source code's original_source_code_path. This function raises the appropriate exception error from error_manager module.

            - get_localized_source_code_path() function to get and return a specific project source code's localized_source_code_path. This function raises the appropriate exception error from error_manager module. 

            - export_files() function to zip and export the files' zip to the OS Downloads folder for the specific source code based on its project unique ID and source code unique ID in the localized_source_code_path. It Downloads the entire localized_source_code_path's content in a zip file. This function raises the appropriate exception error from error_manager module.

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.





    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:


    - TargetLocaleManager class:
        - It manages all the target locales in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the source_codes and target_locales tables in the DB.

        - It takes in source_code_id argument at initialization.

        - It defines and execute the following functions and functionalities:

            - get_target_locales() to get all the target_locales of a specific source_code from the target_locales table. This function raises the appropriate exception error from error_manager module. 

            - get_target_locale() to get any specific target_locale from the target_locales table. This function raises the appropriate exception error from error_manager module. 

            - add_target_locale() to add a new target_locale record for a specific source_code to the target_locales table. This function raises the appropriate exception error from error_manager module. 

            - update_target_locale() to update any target_locale record of a specific source_code in the target_locales table. This function raises the appropriate exception error from error_manager module. 

            - delete_target_locale() to delete any target_locale record of a specific source_code from the target_locales table. This function raises the appropriate exception error from error_manager module. 

            _ delete_target_locales() to delete all target_locales of a specific source_code from the target_locales table. This function raises the appropriate exception error from error_manager module.

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.
            




    - PROMPT:
    Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
    Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
    Please provide any adjustments required in other classes affected by this class specification. Provide the changes/adjustments in code snippets under the class names affected in logical order after the full development of the class described below:

    
    - L10nManager class:
        - The L10nManager defines and executes all localization management procedures of the app. 
        - It inherits the SourceCodeManager class.
        - It defines and executes the following functions and functionalities:
            - reset_l10n() function to delete all the contents of the localized_source_code_path and then copy all the contents of the original_source_code_path to the localized_source_code_path. 
            
            - localize_source_code() function to do the following:

                - Calls the reset_l10n() function to delete and recopy all the contents of the localized_source_code_path from the original_source_code_path. 

                - Calls the required classes from the localizers module to localize the files based on the source code's "type" attribute value. The specific class from the localizers module is called based on the "type" attribute of the source code as follows:
                    - if type = "Web App", then WebAppBasedLocalizer's process_l10n() is called 
                    - if type = "Android App", then AndroidAppBasedLocalizer's process_l10n() is called 
                    - if type = "iOS App", then IOSAppBasedLocalizer's process_l10n() is called 
                    - if type = "Java App", then JavaAppBasedLocalizer's process_l10n() is called
                
                - When the function calls the appropriate class based on the source code's type attribute value, it passes it all the required arguments to initialize and execute its localization logic. This function raises the appropriate exception error from error_manager module. 

        - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.

