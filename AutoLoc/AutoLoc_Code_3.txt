Read this file as a continuation from 'AutoLoc_Code_2.txt' file's content.


11. source_code_manager.py:

from app_manager import AppManager
from db_manager import DBManager
from error_manager import (
    InitializationError,
    DatabaseError,
    InvalidUserInputError,
    FileTypeError,
    FilePermissionError,
    TextExtractionError,
    ResourceFileError,
    LocalizationRenderError,
)
from datetime import datetime
import os
import shutil
import zipfile

class SourceCodeManager:
    """
    Manages all source codes in the AutoLoc app, including CRUD operations, file management, and localization.
    """

    def __init__(self, project_id):
        """
        Initializes the SourceCodeManager by creating instances of AppManager and DBManager,
        and setting up initial paths for source code files.
        """
        try:
            self.app_manager = AppManager()  # Initialize AppManager
            self.db_manager = DBManager()  # Initialize DBManager
            self.project_id = project_id
            self.app_data_path = self.app_manager.get_app_data_path()
            self.original_source_code_path = None
            self.localized_source_code_path = None
        except (InitializationError, DatabaseError) as e:
            raise InitializationError(f"SourceCodeManager Initialization Error: {str(e)}")

    def get_source_codes(self):
        """
        Retrieves all source codes for a specific project.
        """
        try:
            return self.db_manager.get_records('source_codes', {'project_id': self.project_id})
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Get Source Codes Error: {str(e)}")

    def get_source_code(self, source_code_id):
        """
        Retrieves a specific source code by ID.
        """
        try:
            return self.db_manager.get_record('source_codes', source_code_id)
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Get Source Code Error: {str(e)}")

    def get_source_locale(self, source_code_id):
        """
        Retrieves the source locale of a specific source code.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            return source_code['source_locale']
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Get Source Locale Error: {str(e)}")

    def add_source_code(self, name, code_type, source_locale):
        """
        Adds a new source code record for a specific project.
        """
        try:
            data = {
                'project_id': self.project_id,
                'name': name,
                'unique_id': self._generate_unique_id(name),
                'code_type': code_type,
                'source_locale': source_locale,
                'status': 'Unlocalized'
            }
            return self.db_manager.insert_record('source_codes', data)
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Add Source Code Error: {str(e)}")

    def update_source_code(self, source_code_id, data):
        """
        Updates a specific source code record.
        """
        try:
            return self.db_manager.update_record('source_codes', source_code_id, data)
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Update Source Code Error: {str(e)}")

    def delete_source_code(self, source_code_id):
        """
        Deletes a specific source code record and its associated files.
        """
        try:
            self.delete_source_code_files(source_code_id)
            return self.db_manager.delete_record('source_codes', source_code_id)
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Delete Source Code Error: {str(e)}")

    def delete_source_codes(self):
        """
        Deletes all source codes for a specific project and their associated files.
        """
        try:
            source_codes = self.get_source_codes()
            for source_code in source_codes:
                self.delete_source_code_files(source_code['id'])
            return self.db_manager.delete_records('source_codes')
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Delete Source Codes Error: {str(e)}")

    def add_source_code_files(self, source_code_id, upload_path):
        """
        Copies files from the upload path to the app's source code storage.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            project_unique_id = self.db_manager.get_record('projects', self.project_id)['unique_id']
            source_code_unique_id = source_code['unique_id']

            self.original_source_code_path = os.path.join(self.app_data_path, f"{project_unique_id}/{source_code_unique_id}/Original_Files/")
            self.localized_source_code_path = os.path.join(self.app_data_path, f"{project_unique_id}/{source_code_unique_id}/Localized_Files/")

            if not os.path.exists(self.original_source_code_path):
                os.makedirs(self.original_source_code_path)

            shutil.copytree(upload_path, self.original_source_code_path, dirs_exist_ok=True)
            shutil.copytree(self.original_source_code_path, self.localized_source_code_path, dirs_exist_ok=True)

            self.update_source_code(source_code_id, {
                'original_source_code_path': self.original_source_code_path,
                'localized_source_code_path': self.localized_source_code_path
            })
        except (DatabaseError, FilePermissionError, shutil.Error) as e:
            raise FilePermissionError(f"SourceCodeManager Add Source Code Files Error: {str(e)}")

    def update_source_code_files(self, source_code_id, upload_path):
        """
        Updates the source code files for a specific source code.
        """
        try:
            self.delete_source_code_files(source_code_id)
            self.add_source_code_files(source_code_id, upload_path)
        except (DatabaseError, FilePermissionError) as e:
            raise FilePermissionError(f"SourceCodeManager Update Source Code Files Error: {str(e)}")

    def delete_source_code_files(self, source_code_id):
        """
        Deletes all files associated with a specific source code.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            paths = [source_code['original_source_code_path'], source_code['localized_source_code_path']]

            for path in paths:
                if os.path.exists(path):
                    shutil.rmtree(path)
        except (DatabaseError, FilePermissionError) as e:
            raise FilePermissionError(f"SourceCodeManager Delete Source Code Files Error: {str(e)}")

    def get_original_source_code_path(self, source_code_id):
        """
        Retrieves the original source code path for a specific source code.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            return source_code['original_source_code_path']
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Get Original Source Code Path Error: {str(e)}")

    def get_localized_source_code_path(self, source_code_id):
        """
        Retrieves the localized source code path for a specific source code.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            return source_code['localized_source_code_path']
        except DatabaseError as e:
            raise DatabaseError(f"SourceCodeManager Get Localized Source Code Path Error: {str(e)}")

    def export_files(self, source_code_id):
        """
        Exports the localized source code files as a ZIP to the user's Downloads folder.
        """
        try:
            source_code = self.get_source_code(source_code_id)
            zip_filename = os.path.join(os.path.expanduser('~/Downloads'), f"{source_code['unique_id']}_localized.zip")

            with zipfile.ZipFile(zip_filename, 'w') as zipf:
                for root, dirs, files in os.walk(source_code['localized_source_code_path']):
                    for file in files:
                        zipf.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), source_code['localized_source_code_path']))

            return zip_filename
        except (DatabaseError, FilePermissionError, zipfile.BadZipFile) as e:
            raise FilePermissionError(f"SourceCodeManager Export Files Error: {str(e)}")

    def _generate_unique_id(self, name):
        """
        Generates a unique identifier for the source code using an abbreviated name and the current datetime.
        """
        try:
            # Abbreviate the source code's name
            abbreviated_name = self._abbreviate(name)
            # Format the current datetime as "YYYYMMDDHHMMSS"
            current_datetime = datetime.now().strftime('%Y%m%d%H%M%S')
            # Return the unique ID in the format "abbreviated_name_datetime"
            return f"{abbreviated_name}_{current_datetime}"
        except Exception as e:
            raise Exception(f"SourceCodeManager Generate Unique ID Error: {str(e)}")

    def _abbreviate(self, text):
        """
        Creates an abbreviation from the given text by taking the first letter of each word.
        :param text: The text to abbreviate.
        :return: The abbreviation as a string.
        """
        try:
            words = text.split()  # Split the text into words
            abbreviation = ''.join(word[0].upper() for word in words)  # Take the first letter of each word and convert to uppercase
            return abbreviation
        except Exception as e:
            raise Exception(f"SourceCodeManager Abbreviate Error: {str(e)}")



12. test_source_code_manager.py:

import os
import shutil
import sqlite3
from datetime import datetime
from source_code_manager import SourceCodeManager
from error_manager import (
    DatabaseError,
    InitializationError,
    InvalidUserInputError,
    FilePermissionError
)

# Sample data for testing
project_id = 2  # Assume this is a valid project ID
source_code_name = "My New Source Code"
source_code_type = "Web App"
source_code_locale = "ja-JP"

# Create an instance of SourceCodeManager
source_code_manager = SourceCodeManager(project_id)

# 1. Test `_generate_unique_id` function
try:
    unique_id = source_code_manager._generate_unique_id(source_code_name)
    assert isinstance(unique_id, str) and len(unique_id) > 0, f"Expected non-empty string, got {unique_id}"
    print("Test _generate_unique_id: Passed")
except Exception as e:
    print(f"Test _generate_unique_id: Failed with Exception: {str(e)}")

# 2. Test `add_source_code` function
try:
    new_source_code = source_code_manager.add_source_code(source_code_name, source_code_type, source_code_locale)
    assert new_source_code['name'] == source_code_name, f"Expected '{source_code_name}', got {new_source_code['name']}"
    assert new_source_code['code_type'] == source_code_type, f"Expected '{source_code_type}', got {new_source_code['code_type']}"
    print("Test add_source_code: Passed")
except DatabaseError as e:
    print(f"Test add_source_code: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test add_source_code: Failed with Exception: {str(e)}")

# 3. Test `get_source_codes` function
try:
    source_codes = source_code_manager.get_source_codes()
    assert isinstance(source_codes, list), f"Expected list, got {type(source_codes)}"
    print("Test get_source_codes: Passed")
except DatabaseError as e:
    print(f"Test get_source_codes: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test get_source_codes: Failed with Exception: {str(e)}")

# 4. Test `get_source_code` function
try:
    source_code_id = new_source_code['id']
    source_code = source_code_manager.get_source_code(source_code_id)
    assert isinstance(source_code, sqlite3.Row), f"Expected sqlite3.Row, got {type(source_code)}"
    assert source_code['id'] == source_code_id, f"Expected ID {source_code_id}, got {source_code['id']}"
    print("Test get_source_code: Passed")
except DatabaseError as e:
    print(f"Test get_source_code: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test get_source_code: Failed with Exception: {str(e)}")

# 5. Test `get_source_locale` function
try:
    source_code_id = 2
    source_locale = source_code_manager.get_source_locale(source_code_id)
    assert source_locale == source_code_locale, f"Expected '{source_code_locale}', got {source_locale}"
    print("Test get_source_locale: Passed")
except DatabaseError as e:
    print(f"Test get_source_locale: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test get_source_locale: Failed with Exception: {str(e)}")

# 6. Test `update_source_code` function
try:
    updated_data = {'name': 'Updated Source Code Name'}
    updated_source_code = source_code_manager.update_source_code(source_code_id, updated_data)
    assert updated_source_code['name'] == 'Updated Source Code Name', f"Expected 'Updated Source Code Name', got {updated_source_code['name']}"
    print("Test update_source_code: Passed")
except DatabaseError as e:
    print(f"Test update_source_code: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test update_source_code: Failed with Exception: {str(e)}")

# 7. Test `delete_source_code` function
try:
    source_code_id = 2
    deleted_source_code = source_code_manager.delete_source_code(source_code_id)
    assert deleted_source_code['id'] == source_code_id, f"Expected ID {source_code_id}, got {deleted_source_code['id']}"
    print("Test delete_source_code: Passed")
except DatabaseError as e:
    print(f"Test delete_source_code: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test delete_source_code: Failed with Exception: {str(e)}")

# 8. Test `add_source_code_files` function
try:
    source_code_id = 3
    # os.makedirs('../../../Sample Source Code', exist_ok=True)
    source_code_manager.add_source_code_files(source_code_id, '../../../Sample Source Code')
    assert os.path.exists(source_code_manager.original_source_code_path), "Original source code path does not exist."
    print("Test add_source_code_files: Passed")
except (DatabaseError, FilePermissionError) as e:
    print(f"Test add_source_code_files: Failed with Error: {str(e)}")
except Exception as e:
    print(f"Test add_source_code_files: Failed with Exception: {str(e)}")

# 9. Test `update_source_code_files` function
try:
    source_code_id = 2
    source_code_manager.update_source_code_files(source_code_id, '../../../Sample Source Code')
    assert os.path.exists(source_code_manager.original_source_code_path), "Updated source code path does not exist."
    print("Test update_source_code_files: Passed")
except (DatabaseError, FilePermissionError) as e:
    print(f"Test update_source_code_files: Failed with Error: {str(e)}")
except Exception as e:
    print(f"Test update_source_code_files: Failed with Exception: {str(e)}")

# 10. Test `delete_source_code_files` function
try:
    source_code_id = 2
    source_code_manager.delete_source_code_files(source_code_id)
    assert not os.path.exists(source_code_manager.original_source_code_path), "Source code files were not deleted."
    print("Test delete_source_code_files: Passed")
except (DatabaseError, FilePermissionError) as e:
    print(f"Test delete_source_code_files: Failed with Error: {str(e)}")
except Exception as e:
    print(f"Test delete_source_code_files: Failed with Exception: {str(e)}")

# 11. Test `get_original_source_code_path` function
try:
    source_code_id = 2
    original_path = source_code_manager.get_original_source_code_path(source_code_id)
    assert isinstance(original_path, str) and len(original_path) > 0, f"Expected non-empty string, got {original_path}"
    print("Test get_original_source_code_path: Passed")
except DatabaseError as e:
    print(f"Test get_original_source_code_path: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test get_original_source_code_path: Failed with Exception: {str(e)}")

# 12. Test `get_localized_source_code_path` function
try:
    source_code_id = 2
    localized_path = source_code_manager.get_localized_source_code_path(source_code_id)
    assert isinstance(localized_path, str) and len(localized_path) > 0, f"Expected non-empty string, got {localized_path}"
    print("Test get_localized_source_code_path: Passed")
except DatabaseError as e:
    print(f"Test get_localized_source_code_path: Failed with DatabaseError: {str(e)}")
except Exception as e:
    print(f"Test get_localized_source_code_path: Failed with Exception: {str(e)}")

# 13. Test `export_files` function
try:
    source_code_id = 2
    export_path = source_code_manager.export_files(source_code_id)
    assert os.path.exists(export_path), "Exported zip file does not exist."
    print("Test export_files: Passed")
except (DatabaseError, FilePermissionError) as e:
    print(f"Test export_files: Failed with Error: {str(e)}")
except Exception as e:
    print(f"Test export_files: Failed with Exception: {str(e)}")

# Clean up test files and directories
if os.path.exists('../../../Sample Source Code'):
    shutil.rmtree('../../../Sample Source Code')
if os.path.exists(source_code_manager.original_source_code_path):
    shutil.rmtree(source_code_manager.original_source_code_path)
if os.path.exists(source_code_manager.localized_source_code_path):
    shutil.rmtree(source_code_manager.localized_source_code_path)



13. target_locale_manager.py:

from db_manager import DBManager
from error_manager import (
    DatabaseError,
    LocaleManagementError,
    InitializationError
)

class TargetLocaleManager:
    """
    Manages all target locales in the AutoLoc app, including CRUD operations for the target_locales table.
    """

    def __init__(self, source_code_id):
        """
        Initializes the TargetLocaleManager with the provided source_code_id.
        """
        try:
            self.db_manager = DBManager()  # Initialize DBManager for database operations
            self.source_code_id = source_code_id
        except InitializationError as e:
            raise InitializationError(f"TargetLocaleManager Initialization Error: {str(e)}")

    def get_target_locales(self):
        """
        Retrieves all target locales for a specific source code.
        """
        try:
            return self.db_manager.get_records('target_locales', {'source_code_id': self.source_code_id})
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Get Target Locales Error: {str(e)}")

    def get_target_locale(self, target_locale_id):
        """
        Retrieves a specific target locale by ID.
        """
        try:
            return self.db_manager.get_record('target_locales', target_locale_id)
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Get Target Locale Error: {str(e)}")

    def add_target_locale(self, name, code):
        """
        Adds a new target locale record for a specific source code.
        """
        try:
            data = {
                'source_code_id': self.source_code_id,
                'name': name,
                'code': code
            }
            return self.db_manager.insert_record('target_locales', data)
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Add Target Locale Error: {str(e)}")

    def update_target_locale(self, target_locale_id, data):
        """
        Updates a specific target locale record.
        """
        try:
            return self.db_manager.update_record('target_locales', target_locale_id, data)
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Update Target Locale Error: {str(e)}")

    def delete_target_locale(self, target_locale_id):
        """
        Deletes a specific target locale record.
        """
        try:
            return self.db_manager.delete_record('target_locales', target_locale_id)
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Delete Target Locale Error: {str(e)}")

    def delete_target_locales(self):
        """
        Deletes all target locales for a specific source code.
        """
        try:
            return self.db_manager.delete_records('target_locales', {'source_code_id': self.source_code_id})
        except DatabaseError as e:
            raise LocaleManagementError(f"TargetLocaleManager Delete Target Locales Error: {str(e)}")


14. test_target_locale_manager.py:

import sqlite3
from target_locale_manager import TargetLocaleManager
from error_manager import (
    DatabaseError,
    LocaleManagementError,
    InitializationError
)

# Sample data for testing
source_code_id = 3  # Assume this is a valid source code ID
target_locale_name = "French"
target_locale_code = "fr-FR"

# Create an instance of TargetLocaleManager
target_locale_manager = TargetLocaleManager(source_code_id)

# 1. Test `get_target_locales` function
try:
    target_locales = target_locale_manager.get_target_locales()
    assert isinstance(target_locales, list), f"Expected list, got {type(target_locales)}"
    print("Test get_target_locales: Passed")
except LocaleManagementError as e:
    print(f"Test get_target_locales: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test get_target_locales: Failed with Exception: {str(e)}")

# 2. Test `add_target_locale` function
try:
    new_target_locale = target_locale_manager.add_target_locale(target_locale_name, target_locale_code)
    assert new_target_locale['name'] == target_locale_name, f"Expected '{target_locale_name}', got {new_target_locale['name']}"
    assert new_target_locale['code'] == target_locale_code, f"Expected '{target_locale_code}', got {new_target_locale['code']}"
    print("Test add_target_locale: Passed")
except LocaleManagementError as e:
    print(f"Test add_target_locale: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test add_target_locale: Failed with Exception: {str(e)}")

# 3. Test `get_target_locale` function
try:
    target_locale_id = 1
    target_locale = target_locale_manager.get_target_locale(target_locale_id)
    assert isinstance(target_locale, sqlite3.Row), f"Expected sqlite3.Row, got {type(target_locale)}"
    assert target_locale['id'] == target_locale_id, f"Expected ID {target_locale_id}, got {target_locale['id']}"
    print("Test get_target_locale: Passed")
except LocaleManagementError as e:
    print(f"Test get_target_locale: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test get_target_locale: Failed with Exception: {str(e)}")

# 4. Test `update_target_locale` function
try:
    target_locale_id = 1
    updated_data = {'name': 'Updated French', 'code': 'fr-CA'}
    updated_target_locale = target_locale_manager.update_target_locale(target_locale_id, updated_data)
    assert updated_target_locale['name'] == 'Updated French', f"Expected 'Updated French', got {updated_target_locale['name']}"
    assert updated_target_locale['code'] == 'fr-CA', f"Expected 'fr-CA', got {updated_target_locale['code']}"
    print("Test update_target_locale: Passed")
except LocaleManagementError as e:
    print(f"Test update_target_locale: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test update_target_locale: Failed with Exception: {str(e)}")

# 5. Test `delete_target_locale` function
try:
    target_locale_id = 1
    deleted_target_locale = target_locale_manager.delete_target_locale(target_locale_id)
    assert deleted_target_locale['id'] == target_locale_id, f"Expected ID {target_locale_id}, got {deleted_target_locale['id']}"
    print("Test delete_target_locale: Passed")
except LocaleManagementError as e:
    print(f"Test delete_target_locale: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test delete_target_locale: Failed with Exception: {str(e)}")

# 6. Test `delete_target_locales` function
try:
    deleted_target_locales = target_locale_manager.delete_target_locales()
    assert isinstance(deleted_target_locales, list), f"Expected list, got {type(deleted_target_locales)}"
    print("Test delete_target_locales: Passed")
except LocaleManagementError as e:
    print(f"Test delete_target_locales: Failed with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Test delete_target_locales: Failed with Exception: {str(e)}")

# Clean-up actions if needed
# Ensure all added/updated entries are deleted after tests to maintain test isolation
try:
    target_locale_manager.delete_target_locales()
    print("Clean-up: All test target locales deleted.")
except LocaleManagementError as e:
    print(f"Clean-up: Failed to delete test target locales with LocaleManagementError: {str(e)}")
except Exception as e:
    print(f"Clean-up: Failed to delete test target locales with Exception: {str(e)}")

