Classes: localizers module classes:

    - web_localizers sub-module classes:    


        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppFileLocalizer class: 
            - The WebAppFileLocalizer class is the base class for all web app file type localizer classes in the web_localizers module. 
            - It uses the SettingManager and SourceCodeManager classes.
            - It takes in source_code_id as argument at initialization.
            - It defines self.app_settings = self.setting_manager.get_app_settings()
            - It defines and creates self.locales_path variable pointing at source_code.localized_source_code_path/"locales" at initialization.
            - It defines self.source_locale = self.source_code.source_locale at initialization.
            - It defines self.target_locales = self.setting_manager.get_target_locales(source_code_id) at initialization.
            
            - It implements and executes the following functions and functionalities: 

                - generate_key(file_path) function to generate and return a unique string identifier key that will be assigned to any extracted string's replacement key value and as identifier in the JSON file keeping the extracted strings of the file. The key generated should be in the format: "str_1", "str_2", "str_3", etc. or "[file_path]:str_1", "[file_path]:str_2", "[file_path]:str_3" if self.app_settings['use_key_namespace'] = True.

                - save_resource_filess(data, file_path) function to save an extracted file's strings in JSON data format to a JSON file for the self.source_locale and each target locale in self.target_locales. This function saves the same JSON data for each locale JSON file. The parameters are explained as follows: 
                    - :param data: The JSON data to save.
                    - :param file: The path to the file being processed.
                    The function saves the JSON resource file as self.locales_path/[locale's code]/[file's path without the extension].json. The [locale's code] stand for any locale code such as ja-JP, en-US, zh-CN, etc. for each locale (either source or target locale) specified in the parameters. The [file's path without extension] stands for the file's path being processed but without its extension (e.g. removing the .html) and replace the extension with .json and save the JSON data inside the JSON file created and saved to the locales folder using the self.locales_path.
                    For example, the saved JSON resource files should have the following similar paths:
                        - self.locales_path/ja-JP/file/path/being/extracted/file.json
                        - self.locales_path/en-US/file/path/being/extracted/file.json 
                        - self.locales_path/zh-CN/file/path/being/extracted/file.json 
                        - self.locales_path/zh-TW/file/path/being/extracted/file.json
                        - self.locales_path/ko-KR/file/path/being/extracted/file.json
                
                - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.

        


        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppHTMLFileLocalizer class:
            - The WebAppHTMLFileLocalizer handles all HTML file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization. 
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.target_tags = ['title', 'div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'pre', 'blockquote', 'li', 'figcaption', 'caption', 'td', 'th', 'label', 'option']
                    
                    - self.special_tags = ['meta', 'img']

                    - self.nav_tags = ['a', 'button']
                    
                    - self.formatting_tags = ['span', 'br', 'b', 'strong', 'i', 'em', 'mark', 'small', 'del', 'ins', 'sub', 'sup', 'u', 's', 'abbr', 'code', 'kbd', 'samp', 'var', 'cite', 'q', 'dfn', 'time', 'bdi', 'bdo', 'ruby', 'rt', 'rp', 'wbr']


                - It executes the self.localize_files() function in the Thread's run() function.

                - localize_files() function to localize all the files in self.files as in the following example:
                    for html_file in files:
                        self._process_html_file(html_file)
                
                - _process_html_file(html_file) function to process a given HTML file as in the following example:
                    with open(html_file, 'r', encoding='utf-8') as file:
                        soup = BeautifulSoup(file, 'html.parser')

                    self._mark_translatable_strings(soup)
                    self._extract_and_save_strings(soup, html_file)

                    And the function duplicates the HTML file if the self.app_settings['duplicate_html'] is True as:

                    self._duplicate_html_file(soup, html_file)
                
                - _mark_translatable_strings(soup, file_path) function to mark all the translatable strings in a given BeautifulSoup object and uses file_path in self.generate_key() from parent calss. This function implement a code similar to the following:

                    def _mark_translatable_strings(self, soup, file_path):
                        """
                        Marks all translatable strings in the HTML content.

                        :param soup: The BeautifulSoup object containing the HTML content.
                        """
                        
                        # Process target_tags

                        for tag in soup.find_all(self.target_tags):
                            if 'data-i18n' in tag.attrs:
                                continue  # Skip tags that are already marked
                            if self._is_inside_nav_or_formatting_tags(tag):
                                continue  # Skip if tag is inside a nav tag or formatting tag parent
                            if tag.find(self.target_tags) or tag.find(self.special_tags):
                                continue  # Skip if tag contains another target tag or special tag as an immediate child
                            
                            if (tag.string and tag.string.strip()) or tag.get_text(strip=True):
                                tag['data-i18n'] = self.generate_key(file_path)
                            elif self._has_nav_or_formatting_tags(tag):
                                tag['data-i18n'] = self.generate_key(file_path)

                        # Process special_tags

                        for tag in soup.find_all(self.special_tags):
                            if 'data-i18n' in tag.attrs:
                                continue  # Skip tags that are already marked
                            if self._is_inside_nav_or_formatting_tags(tag):
                                continue  # Skip if tag is inside a nav tag
                            if tag.name == 'img' and tag.has_attr('alt') and tag['alt'].strip():
                                tag['data-i18n'] = self.generate_key(file_path)
                            elif tag.name == 'meta' and (tag.get('name') in ['description', 'author'] or tag.get('property') in ['og:title', 'og:description', 'og:site_name']):
                                if tag.has_attr('content') and tag['content'].strip():
                                    tag['data-i18n'] = self.generate_key(file_path)

                        # Process nav_tags

                        for tag in soup.find_all(self.nav_tags):
                            if 'data-i18n' in tag.attrs:
                                continue  # Skip tags that are already marked
                            if self._has_target_formatting_or_special_tags(tag):
                                tag['data-i18n'] = self.generate_key(file_path)
                            elif any(sibling.name in self.target_tags for sibling in tag.find_next_siblings()):
                                tag['data-i18n'] = self.generate_key(file_path)

                        # Formatting tags are never marked

                        The following are the example helper functions called in the _mark_translatable_strings() above:

                        def _has_nav_or_formatting_tags(self, tag):
                            """
                            Checks if a tag has nav_tags or formatting_tags children.
                            """
                            for child in tag.find_all(recursive=False):
                                if child.name in self.nav_tags or child.name in self.formatting_tags:
                                    return True
                            return False
                        
                        def _has_target_formatting_or_special_tags(self, tag):
                            """
                            Checks if a tag has target_tags, formatting_tags, or special_tags children.
                            """
                            for child in tag.find_all(recursive=False):
                                if child.name in self.target_tags or child.name in self.formatting_tags or child.name in self.special_tags:
                                    return True
                            return False

                        def _is_inside_nav_or_formatting_tags(self, tag):
                            """
                            Checks if a tag is inside nav_tags or formatting_tags parents.
                            """
                            parent = tag.parent
                            while parent is not None:
                                if parent.name in self.nav_tags or parent.name in self.formatting_tags:
                                    return True
                                parent = parent.parent
                            return False
                        
                        def _is_inside_nav_tags(self, tag):
                            """
                            Checks if a tag is inside nav_tags parents.
                            """
                            parent = tag.parent
                            while parent is not None:
                                if parent.name in self.nav_tags:
                                    return True
                                parent = parent.parent
                            return False
                
                - _extract_and_save_strings(soup, html_file) function that extracts and saves the translatable strings to JSON files. The function can be implemented as similar to the following code example:

                    def _extract_and_save_strings(self, soup, html_file):
                        """
                        Extracts and saves the translatable strings to JSON files.

                        :param soup: The BeautifulSoup object containing the HTML content.
                        :param html_file: The path to the HTML file being processed.
                        """
                        source_json = {}
                        html_file_key = os.path.relpath(html_file, self.root_dir).replace(os.sep, '/')

                        for tag in soup.find_all(attrs={"data-i18n": True}):
                            key = tag['data-i18n']
                            inner_html = ''.join(str(child) for child in tag.children).strip() if tag.children else None
                            if inner_html and inner_html.strip():
                                if html_file_key not in source_json:
                                    source_json[html_file_key] = {}
                                source_json[html_file_key][key] = inner_html

                        if source_json:
                            self.save_resource_files(source_json, html_file)
                        
                    Please adjust the following in the above code:
                        - remove the html_file_key functionality
                        - the key in source_json[key] should be split on the ":" part and take only second part without the namespace_suffix part. 

                - _duplicate_html_file(soup, html_file) function that duplicates the HTML file for each target locale and modifies the lang attribute. The following is an implementation example of the this function:

                    def _duplicate_html_file(self, soup, html_file):
                        """
                        Duplicates the HTML file for each target locale and modifies the lang attribute.

                        :param soup: The BeautifulSoup object containing the HTML content.
                        :param html_file: The path to the HTML file being processed.
                        """
                        source_locale = self.source_locale
                        soup.html['lang'] = source_locale
                        self._save_html_file(soup, html_file, source_locale, is_original=True)

                        for target_locale in self.target_locales:
                            duplicate_html = BeautifulSoup(str(soup), 'html.parser')
                            duplicate_html.html['lang'] = target_locale['code']
                            self._save_html_file(duplicate_html, html_file, target_locale['code'])

                    def _save_html_file(self, soup, html_file, locale, is_original=False):
                        """
                        Saves the modified HTML file with the lang attribute.

                        :param soup: The BeautifulSoup object containing the HTML content.
                        :param html_file: The path to the HTML file being processed.
                        :param locale: The locale code for the HTML file.
                        :param is_original: A flag indicating if this is the original HTML file.
                        """
                        file_dir, file_name = os.path.split(html_file)
                        if is_original:
                            new_file_path = os.path.join(file_dir, file_name)
                        else:
                            locale_dir = os.path.join(file_dir, "locales", locale)
                            file_name_without_ext, file_ext = os.path.splitext(file_name)
                            new_file_name = f"{file_name_without_ext}_{locale.replace('-', '_')}{file_ext}"
                            new_file_path = os.path.join(locale_dir, new_file_name)

                        os.makedirs(os.path.dirname(new_file_path), exist_ok=True)

                        with open(new_file_path, 'w', encoding='utf-8') as file:
                            file.write(soup.prettify())
                
            
            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.




        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppJSFileLocalizer: class
            - The WebAppJSFileLocalizer handles all JS file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        # Please correct this part to match simple strings in double quotes only.
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in double quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>\s*(.*?)\s*<'),               # Matches HTML content between tags
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the JS files in the self.files veriable. Code example:
                    
                    for js_file in self.files:
                        self._process_js_file(js_file)
                
                - _process_js_file(js_file) function that processes an individual JS file for localization. Code example:

                    def _process_js_file(self, js_file):
                        """
                        Processes an individual JS file for localization.

                        :param js_file: The path to the JS file to process.
                        """
                        with open(js_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, js_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the JS file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with "${translate('unique_id')}" where unique_id is obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in JS content is exactly as "${translate('unique_id')}". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_js_file(content, js_file) to save the modified JS file as replacement of the original JS file.
                
                - _save_js_file(content, js_file) function that saves the modified JS file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.






        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppEJSFileLocalizer: class
            - The WebAppEJSFileLocalizer handles all EJS file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        re.compile(r'<%=\s*(.*?)\s*%>'),  # Matches rendered EJS content
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the EJS files in the self.files veriable. Code example:
                    
                    for ejs_file in self.files:
                        self._process_ejs_file(ejs_file)
                
                - _process_ejs_file(ejs_file) function that processes an individual EJS file for localization. Code example:

                    def _process_ejs_file(self, ejs_file):
                        """
                        Processes an individual EJS file for localization.

                        :param ejs_file: The path to the EJS file to process.
                        """
                        with open(ejs_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, ejs_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the EJS file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with "${{unique_id}}" where unique_id is obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in EJS content is exactly as "${translate('unique_id')}". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_ejs_file(content, ejs_file) to save the modified EJS file as replacement of the original EJS file.
                
                - _save_ejs_file(content, ejs_file) function that saves the modified EJS file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.






        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppJSXFileLocalizer: class
            - The WebAppJSXFileLocalizer handles all JSX file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        Please put here appropriate Regular Expression patterns appropriate for JSX translatable strings targetting. 
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the JSX files in the self.files veriable. Code example:
                    
                    for jsx_file in self.files:
                        self._process_jsx_file(jsx_file)
                
                - _process_jsx_file(jsx_file) function that processes an individual JSX file for localization. Code example:

                    def _process_jsx_file(self, jsx_file):
                        """
                        Processes an individual JSX file for localization.

                        :param jsx_file: The path to the JSX file to process.
                        """
                        with open(jsx_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, jsx_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the JSX file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with the key obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in JSX content is exactly as "{t('key')}". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_jsx_file(content, jsx_file) to save the modified JSX file as replacement of the original JSX file.
                
                - _save_jsx_file(content, jsx_file) function that saves the modified JSX file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.





        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppTSFileLocalizer: class
            - The WebAppTSFileLocalizer handles all TS file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>{1}\s*(.*?)\s*<{1}'),         # Matches HTML content between tags
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the TS files in the self.files veriable. Code example:
                    
                    for ts_file in self.files:
                        self._process_ts_file(ts_file)
                
                - _process_ts_file(ts_file) function that processes an individual TS file for localization. Code example:

                    def _process_ts_file(self, ts_file):
                        """
                        Processes an individual TS file for localization.

                        :param ts_file: The path to the TS file to process.
                        """
                        with open(ts_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, ts_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the TS file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with the key obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in TS content is exactly as "t('key')". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_ts_file(content, ts_file) to save the modified TS file as replacement of the original TS file.
                
                - _save_ts_file(content, ts_file) function that saves the modified TS file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.






        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppTSXFileLocalizer: class
            - The WebAppTSXFileLocalizer handles all TSX file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>{1}\s*(.*?)\s*<{1}'),         # Matches HTML content between tags
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the TSX files in the self.files veriable. Code example:
                    
                    for tsx_file in self.files:
                        self._process_tsx_file(tsx_file)
                
                - _process_tsx_file(tsx_file) function that processes an individual TSX file for localization. Code example:

                    def _process_tsx_file(self, tsx_file):
                        """
                        Processes an individual TSX file for localization.

                        :param tsx_file: The path to the TSX file to process.
                        """
                        with open(tsx_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, tsx_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the TSX file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with the key obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in TSX content is exactly as "{t('key')}". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_tsx_file(content, tsx_file) to save the modified TSX file as replacement of the original TSX file.
                
                - _save_tsx_file(content, tsx_file) function that saves the modified TSX file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.







        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppVUEFileLocalizer: class
            - The WebAppVUEFileLocalizer handles all VUE file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>{1}\s*(.*?)\s*<{1}'),         # Matches HTML content between tags
                        ]
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the VUE files in the self.files veriable. Code example:
                    
                    for vue_file in self.files:
                        self._process_vue_file(vue_file)
                
                - _process_vue_file(vue_file) function that processes an individual VUE file for localization. Code example:

                    def _process_vue_file(self, vue_file):
                        """
                        Processes an individual VUE file for localization.

                        :param vue_file: The path to the VUE file to process.
                        """
                        with open(vue_file, 'r', encoding='utf-8') as file:
                            content = file.read()

                        self._mark_and_extract_strings(content, vue_file)
                
                - _mark_and_extract_strings(file_path) function that marks and extracts all the translatable strings in the VUE file content and save them to a JSON file. It implements the following features:
                    - It captures every string that matches the self.translatable_patterns and sends it to a JSON file using self.save_resource_files() from parent class. 
                    - It ensures that the extracted string to the JSON file is replaced with the key obtained from self.generate_key(file_path) of parent class. 
                    - The key of the string in the JSON file must not include the namespace_suffix of the key if self.app_settings['use_key_namespace'] is True.
                    - Please ensure that the replacement effected in VUE content is exactly as "{{$t('key')}}". Please make sure to escape the {} parts of the replacement string in Python to avoid errors.
                    - It calls self._save_vue_file(content, vue_file) to save the modified VUE file as replacement of the original VUE file.
                
                - _save_vue_file(content, vue_file) function that saves the modified VUE file to replace the original.

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.








       - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppJSONFileLocalizer: class
            - The WebAppJSONFileLocalizer handles all JSON file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the JSON files in the self.files veriable. Code example:
                    
                    for json_file in self.files:
                        self._process_json_file(json_file)
                
                - _process_json_file(json_file) function that processes an individual JSON file for localization. This function extracts the contents of the json_file and saves it for each locale by calling self.save_resource_files() of parent class. 
                

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.






        - PROMPT:
        Write the full class described below based on the description and your expertise as a software developer. Add or adjust any specification as you deem fit for the AutoLoc app. Indicate the class name concerned in all exceptions/errors to enable the user easily locate the class throwing the exception/error. 
        Please correct any wrong or defective specification in the class description below and adjust it for the best practices available in the development of such classes.
        If there are any changes needed in other classes affected by this class, please indicate them in code snippets after wiriting this class:

        - WebAppCSVFileLocalizer: class
            - The WebAppCSVFileLocalizer handles all CSV file-specific localization procedures. 
            - It inherits the WebAppFileLocalizer class.
            - It runs on its own PySide6 Thread.
            - It takes in source_code_id and files list as arguments at initialization.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.files = files
                
                - It executes the self.localize_files() function in the Thread's run() function.                   

                - localize_files() function that localizes all the CSV files in the self.files veriable. Code example:
                    
                    for csv_file in self.files:
                        self._process_csv_file(csv_file)
                
                - _process_csv_file(csv_file) function that processes an individual CSV file for localization. This function extracts the contents of the csv_file and saves it for each locale by calling self.save_resource_files() of parent class. 
                

            - Adjust/add/remove any functionality you deem fit for the class based on your expertise and understanding of how such classes are written and what such classes should do.


    



    - android_localizers sub-module classes:

        




    - ios_localizers sub-module classes:

    





    - java_localizers sub-module classes:

    


