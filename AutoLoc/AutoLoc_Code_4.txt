Read this file as a continuation from 'AutoLoc_Code_3.txt' file's content.

15. l10n_manager.py: in `managers` module:

# l10n_manager.py

from PySide6.QtCore import QObject, Signal
from source_code_manager import SourceCodeManager
from setting_manager import SettingManager
from error_manager import (
    InitializationError,
    InvalidUserInputError,
    LocalizationRenderError
)

# Import all the localizer classes
from localizers.web_localizers.web_app_html_file_localizer import WebAppHTMLFileLocalizer
from localizers.web_localizers.web_app_js_file_localizer import WebAppJSFileLocalizer
from localizers.web_localizers.web_app_ejs_file_localizer import WebAppEJSFileLocalizer
from localizers.web_localizers.web_app_jsx_file_localizer import WebAppJSXFileLocalizer
from localizers.web_localizers.web_app_ts_file_localizer import WebAppTSFileLocalizer
from localizers.web_localizers.web_app_tsx_file_localizer import WebAppTSXFileLocalizer
from localizers.web_localizers.web_app_vue_file_localizer import WebAppVueFileLocalizer
from localizers.web_localizers.web_app_json_file_localizer import WebAppJSONFileLocalizer
from localizers.web_localizers.web_app_csv_file_localizer import WebAppCSVFileLocalizer

from localizers.android_localizers.android_app_xml_file_localizer import AndroidAppXMLFileLocalizer
from localizers.android_localizers.android_app_java_file_localizer import AndroidAppJavaFileLocalizer
from localizers.android_localizers.android_app_kotlin_file_localizer import AndroidAppKotlinFileLocalizer

from localizers.ios_localizers.ios_app_swift_file_localizer import IOSAppSwiftFileLocalizer
from localizers.ios_localizers.ios_app_objc_m_file_localizer import IOSAppObjcMFileLocalizer
from localizers.ios_localizers.ios_app_objc_h_file_localizer import IOSAppObjcHFileLocalizer
from localizers.ios_localizers.ios_app_strings_file_localizer import IOSAppStringsFileLocalizer
from localizers.ios_localizers.ios_app_storyboard_file_localizer import IOSAppStoryboardFileLocalizer
from localizers.ios_localizers.ios_app_xib_file_localizer import IOSAppXIBFileLocalizer
from localizers.ios_localizers.ios_app_plist_file_localizer import IOSAppPListFileLocalizer

from localizers.java_localizers.java_app_xhtml_file_localizer import JavaAppXHTMLFileLocalizer
from localizers.java_localizers.java_app_xml_file_localizer import JavaAppXMLFileLocalizer
from localizers.java_localizers.java_app_java_file_localizer import JavaAppJavaFileLocalizer
from localizers.java_localizers.java_app_properties_file_localizer import JavaAppPropertiesFileLocalizer


class L10nManager(QObject):
    """
    The L10nManager class handles all localization procedures of the AutoLoc app.
    It coordinates the localization of different source code files according to their types.
    """
    
    # Define signals to be emitted during localization
    localization_complete_signal = Signal(str, bool)

    def __init__(self, source_code_id):
        super().__init__()
        try:
            # Initialize the source code manager
            self.source_code_manager = SourceCodeManager(source_code_id)
            self.source_code = self.source_code_manager.get_source_code(source_code_id)
            self.source_code_type = self.source_code['code_type']
            self.source_code_status = self.source_code['status']

            # Initialize the setting manager and get active file types
            self.setting_manager = SettingManager()
            self.active_file_types = self.get_active_file_types()

            # Validate source code type
            self.accepted_source_code_types = ["Web App", "Android App", "iOS App", "Java App"]
            if self.source_code_type not in self.accepted_source_code_types:
                raise InvalidUserInputError(f"L10nManager Initialization Error: Unsupported source code type '{self.source_code_type}'")

            # Get files based on active file types
            self.files = self.get_files()
        except (InitializationError, InvalidUserInputError) as e:
            raise InitializationError(f"L10nManager Initialization Error: {str(e)}")


    def get_active_file_types(self):
        """
        Retrieves and returns active file types for the current source code type.
        """
        try:
            file_types = self.setting_manager.get_file_types()
            return [ft['extension'] for ft in file_types if ft['is_active'] and ft['code_type'] == self.source_code_type]
        except Exception as e:
            raise InvalidUserInputError(f"L10nManager Error in get_active_file_types: {str(e)}")

    def get_files(self):
        """
        Retrieves files categorized by their extensions based on active file types.
        """
        files_dict = {}
        try:
            for extension in self.active_file_types:
                files_by_extension = self.get_files_by_extension(extension)
                if files_by_extension:
                    files_dict[extension] = files_by_extension
            return files_dict
        except Exception as e:
            raise InvalidUserInputError(f"L10nManager Error in get_files: {str(e)}")

    def get_files_by_extension(self, extension):
        """
        Retrieves files with the specified extension from the source code's localized path.
        """
        try:
            localized_path = self.source_code_manager.get_localized_source_code_path(self.source_code['id'])
            files = []
            for root, _, filenames in os.walk(localized_path):
                for filename in filenames:
                    if filename.endswith(extension):
                        files.append(os.path.relpath(os.path.join(root, filename), localized_path))
            return files
        except Exception as e:
            raise InvalidUserInputError(f"L10nManager Error in get_files_by_extension: {str(e)}")

    def localize_source_code(self):
        """
        Initiates the localization process based on the source code type.
        """
        try:
            # Check if the source code has already been localized
            if self.source_code_status == "Localized":
                raise LocalizationRenderError("L10nManager Error: The source code has already been localized!")

            if self.source_code_type == "Web App":
                self.localize_web_files()
            elif self.source_code_type == "Android App":
                self.localize_android_files()
            elif self.source_code_type == "iOS App":
                self.localize_ios_files()
            elif self.source_code_type == "Java App":
                self.localize_java_files()
            else:
                raise InvalidUserInputError(f"L10nManager Error in localize_source_code: Unsupported source code type '{self.source_code_type}'")
        except LocalizationRenderError as e:
            self.localization_complete_signal.emit(f"L10nManager Error in localize_source_code: {str(e)}", False)
            return  # Stop the localization process
        except Exception as e:
            raise LocalizationRenderError(f"L10nManager Error in localize_source_code: {str(e)}")


    def localize_web_files(self):
        """
        Localizes web app files using the respective localizer classes.
        """
        try:
            if not self.files:
                raise LocalizationRenderError("L10nManager Error in localize_web_files: No files found for localization.")

            # Map file extensions to their respective localizer classes
            localizer_classes = {
                '.html': WebAppHTMLFileLocalizer,
                '.js': WebAppJSFileLocalizer,
                '.ejs': WebAppEJSFileLocalizer,
                '.jsx': WebAppJSXFileLocalizer,
                '.ts': WebAppTSFileLocalizer,
                '.tsx': WebAppTSXFileLocalizer,
                '.vue': WebAppVueFileLocalizer,
                '.json': WebAppJSONFileLocalizer,
                '.csv': WebAppCSVFileLocalizer,
            }

            for extension, files in self.files.items():
                if files and extension in localizer_classes:
                    localizer = localizer_classes[extension](self.source_code['id'], files)  # Pass source_code_id and files list
                    localizer.localization_complete_signal.connect(self.localization_complete_signal.emit)
                    localizer.start()  # Start the localizer thread

            self.source_code_manager.update_source_code(self.source_code['id'], {'status': 'Localized'})
        except Exception as e:
            raise LocalizationRenderError(f"L10nManager Error in localize_web_files: {str(e)}")

    def localize_android_files(self):
        """
        Localizes Android app files using the respective localizer classes.
        """
        try:
            if not self.files:
                raise LocalizationRenderError("L10nManager Error in localize_android_files: No files found for localization.")

            localizer_classes = {
                '.xml': AndroidAppXMLFileLocalizer,
                '.java': AndroidAppJavaFileLocalizer,
                '.kt': AndroidAppKotlinFileLocalizer,
            }

            for extension, files in self.files.items():
                if files and extension in localizer_classes:
                    localizer = localizer_classes[extension](self.source_code['id'], files)  # Pass source_code_id and files list
                    localizer.localization_complete_signal.connect(self.localization_complete_signal.emit)
                    localizer.start()  # Start the localizer thread

            self.source_code_manager.update_source_code(self.source_code['id'], {'status': 'Localized'})
        except Exception as e:
            raise LocalizationRenderError(f"L10nManager Error in localize_android_files: {str(e)}")

    def localize_ios_files(self):
        """
        Localizes iOS app files using the respective localizer classes.
        """
        try:
            if not self.files:
                raise LocalizationRenderError("L10nManager Error in localize_ios_files: No files found for localization.")

            localizer_classes = {
                '.swift': IOSAppSwiftFileLocalizer,
                '.m': IOSAppObjcMFileLocalizer,
                '.h': IOSAppObjcHFileLocalizer,
                '.strings': IOSAppStringsFileLocalizer,
                '.storyboard': IOSAppStoryboardFileLocalizer,
                '.xib': IOSAppXIBFileLocalizer,
                '.plist': IOSAppPListFileLocalizer,
            }

            for extension, files in self.files.items():
                if files and extension in localizer_classes:
                    localizer = localizer_classes[extension](self.source_code['id'], files)  # Pass source_code_id and files list
                    localizer.localization_complete_signal.connect(self.localization_complete_signal.emit)
                    localizer.start()  # Start the localizer thread

            self.source_code_manager.update_source_code(self.source_code['id'], {'status': 'Localized'})
        except Exception as e:
            raise LocalizationRenderError(f"L10nManager Error in localize_ios_files: {str(e)}")

    def localize_java_files(self):
        """
        Localizes Java app files using the respective localizer classes.
        """
        try:
            if not self.files:
                raise LocalizationRenderError("L10nManager Error in localize_java_files: No files found for localization.")

            localizer_classes = {
                '.xhtml': JavaAppXHTMLFileLocalizer,
                '.xml': JavaAppXMLFileLocalizer,
                '.java': JavaAppJavaFileLocalizer,
                '.properties': JavaAppPropertiesFileLocalizer,
            }

            for extension, files in self.files.items():
                if files and extension in localizer_classes:
                    localizer = localizer_classes[extension](self.source_code['id'], files)  # Pass source_code_id and files list
                    localizer.localization_complete_signal.connect(self.localization_complete_signal.emit)
                    localizer.start()  # Start the localizer thread

            self.source_code_manager.update_source_code(self.source_code['id'], {'status': 'Localized'})
        except Exception as e:
            raise LocalizationRenderError(f"L10nManager Error in localize_java_files: {str(e)}")





16. localizers.web_localizers.web_app_file_localizer.py:

# web_app_file_localizer.py

import os
import json
from pathlib import Path
from PySide6.QtCore import QObject, Signal
from setting_manager import SettingManager
from source_code_manager import SourceCodeManager
from error_manager import (
    InitializationError,
    InvalidUserInputError,
    ResourceFileError,
)

class WebAppFileLocalizer(QObject):
    """
    The WebAppFileLocalizer class serves as the base class for all web app file type localizer classes.
    It manages common functionalities such as progress tracking, key generation, and saving extracted strings to resource files.
    """

    def __init__(self, source_code_id):
        super().__init__()
        try:
            # Initialize necessary managers
            self.setting_manager = SettingManager()
            self.source_code_manager = SourceCodeManager(source_code_id)
            
            # Get source code information
            self.source_code = self.source_code_manager.get_source_code(source_code_id)
            self.source_locale = self.source_code['source_locale']
            self.app_settings = self.setting_manager.get_app_settings()

            # Initialize paths
            self.locales_path = Path(self.source_code['localized_source_code_path']) / "locales"

            # Ensure the locales directory exists
            self.locales_path.mkdir(parents=True, exist_ok=True)
            
            # Get target locales for the source code
            self.target_locales = self.setting_manager.get_target_locales(source_code_id)
        except (InitializationError, InvalidUserInputError) as e:
            raise InitializationError(f"WebAppFileLocalizer Initialization Error: {str(e)}")

    def generate_key(self, file_path):
        """
        Generates a unique string identifier key for the extracted strings.

        :param file_path: The path of the file being processed
        :return: A unique key string
        """
        try:
            # Remove the file extension from the file path
            namespace_prefix = f"{Path(file_path).stem}:" if self.app_settings.get('use_key_namespace', False) else ""
            existing_keys = self._get_existing_keys(file_path)
            new_key_index = len(existing_keys) + 1
            return f"{namespace_prefix}str_{new_key_index}"
        except Exception as e:
            raise InvalidUserInputError(f"WebAppFileLocalizer Error in generate_key: {str(e)}")

    def save_resource_files(self, data, file_path):
        """
        Saves the extracted strings in JSON format for both source and target locales.

        :param data: The JSON data to save
        :param file_path: The path to the file being processed
        """
        try:
            # Remove extension from file path and create corresponding JSON file path
            json_file_name = Path(file_path).with_suffix('.json').as_posix()

            # Save data for source locale
            source_locale_path = self.locales_path / self.source_locale / json_file_name
            self._write_json_file(data, source_locale_path)

            # Save data for each target locale
            for locale in self.target_locales:
                locale_path = self.locales_path / locale['code'] / json_file_name
                self._write_json_file(data, locale_path)
        except Exception as e:
            raise ResourceFileError(f"WebAppFileLocalizer Error in save_resource_files: {str(e)}")

    def _get_existing_keys(self, file_path):
        """
        Retrieves existing keys from the JSON resource file for the given file path.

        :param file_path: The path of the file being processed
        :return: A set of existing keys in the resource file
        """
        try:
            json_file_name = Path(file_path).with_suffix('.json').as_posix()
            source_locale_path = self.locales_path / self.source_locale / json_file_name

            if source_locale_path.exists():
                with open(source_locale_path, 'r', encoding='utf-8') as json_file:
                    data = json.load(json_file)
                    return set(data.keys())
            return set()
        except Exception as e:
            raise ResourceFileError(f"WebAppFileLocalizer Error in _get_existing_keys: {str(e)}")

    def _write_json_file(self, data, file_path):
        """
        Writes JSON data to the specified file path, ensuring the directory exists.

        :param data: The JSON data to write
        :param file_path: The path to the JSON file
        """
        try:
            file_path.parent.mkdir(parents=True, exist_ok=True)
            with open(file_path, 'w', encoding='utf-8') as json_file:
                json.dump(data, json_file, ensure_ascii=False, indent=4)
        except Exception as e:
            raise ResourceFileError(f"WebAppFileLocalizer Error in _write_json_file: {str(e)}")




17. localizers.web_localizers.web_app_html_file_localizer.py:



