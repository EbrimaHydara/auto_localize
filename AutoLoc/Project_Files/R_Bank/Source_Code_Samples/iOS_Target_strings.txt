In TOPCampaignView.m file:
Here are the lists of non-localized hardcoded user-facing texts and localized user-facing texts based on the provided iOS code:

### Non-Localized Hardcoded User-Facing Texts:
1. **Text**: `"Promotion is already started."`
   - **Context**: In the `start` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Promotion is already started.");
     ```

2. **Text**: `"Promotion paging started."`
   - **Context**: In the `start` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Promotion paging started.");
     ```

3. **Text**: `"Promotion paging is disabled."`
   - **Context**: In the `start` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Promotion paging is disabled.");
     ```

4. **Text**: `"Promotion paging stopped."`
   - **Context**: In the `stop` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Promotion paging stopped.");
     ```

5. **Text**: `"No working timer exist."`
   - **Context**: In the `stop` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"No working timer exist.");
     ```

6. **Text**: `"Loading image:%@"`
   - **Context**: In the `loadImageOnBackground` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Loading image:%@", urlStr);
     ```

7. **Text**: `"Loaded from cache:%@"`
   - **Context**: In the `loadImageOnBackground` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"Loaded from cache:%@", urlStr);
     ```

8. **Text**: `"TOPCampaignView::onTimerFire"`
   - **Context**: In the `onTimerFire` method, used in a logging statement.
   - **Code**:
     ```objc
     RBLog(@"TOPCampaignView::onTimerFire");
     ```

### Localized User-Facing Texts:
There are no localized user-facing texts in the provided code. All the user-facing texts are hardcoded and do not appear to be localized.



In UIUXLILoginView.m file:
Based on the provided code, here are the lists of non-localized hardcoded user-facing texts and localized user-facing texts:

### Non-Localized Hardcoded User-Facing Texts:
1. **Text**: `"ログイン"`
   - **Context**: Used as the title for the login button.
   - **Code**:
     ```objc
     [self.loginButton setTitle:@"ログイン" forState:UIControlStateNormal];
     ```

2. **Text**: `"icon_pwd_show"`
   - **Context**: Used as the image name for the password display button.
   - **Code**:
     ```objc
     static NSString * const BTN_PASSDISP_IMAGE = @"icon_pwd_show";
     ```

3. **Text**: `"icon_pwd_hide"`
   - **Context**: Used as the image name for the password hide button.
   - **Code**:
     ```objc
     static NSString * const BTN_PASSHIDE_IMAGE = @"icon_pwd_hide";
     ```

4. **Text**: `"logo_rkbk_horizontal"`
   - **Context**: Used as the image name for the Rakuten Bank logo.
   - **Code**:
     ```objc
     logoImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"logo_rkbk_horizontal"]];
     ```

5. **Text**: `"service_button_arrow"`
   - **Context**: Used as the image name for the arrow in the link text view.
   - **Code**:
     ```objc
     UIImage * arrowImage = [UIImage imageNamed:@"service_button_arrow"];
     ```

### Localized User-Facing Texts:
1. **Text**: `NSLocalizedString(@"UI0002_InputTitle_UserID", nil)`
   - **Context**: Used for the user ID input field title.
   - **Code**:
     ```objc
     NSString * userIdTitle = [NSString stringWithFormat:NSLocalizedString(@"UI0002_InputTitle_UserID", nil), NSLocalizedString(@"Common_RKBKName", nil), NSLocalizedString(@"Common_UserID", nil)];
     ```

2. **Text**: `NSLocalizedString(@"UI0002_InputTitle_LoginPassword", nil)`
   - **Context**: Used for the login password input field title.
   - **Code**:
     ```objc
     NSString * pinTitle = [NSString stringWithFormat:NSLocalizedString(@"UI0002_InputTitle_LoginPassword", nil), NSLocalizedString(@"Common_LoginPassword", nil)];
     ```

3. **Text**: `NSLocalizedString(@"UI0002_LinkTitle_Unclear", nil)`
   - **Context**: Used for the link text when the user is unclear about the login.
   - **Code**:
     ```objc
     NSString * linkTitleUnclear = [NSString stringWithFormat:NSLocalizedString(@"UI0002_LinkTitle_Unclear", nil), NSLocalizedString(@"Common_Login", nil)];
     ```

4. **Text**: `NSLocalizedString(@"UI0002_LinkTitle_FirstLogin", nil)`
   - **Context**: Used for the link text when the user is logging in for the first time.
   - **Code**:
     ```objc
     NSString * linkTitleFirstLogin = [NSString stringWithFormat:NSLocalizedString(@"UI0002_LinkTitle_FirstLogin", nil), NSLocalizedString(@"Common_Login", nil)];
     ```

5. **Text**: `NSLocalizedString(@"Common_About_TouchID_Login", nil)`
   - **Context**: Used for the link text about Touch ID login.
   - **Code**:
     ```objc
     [stackView addView:[self linkText:NSLocalizedString(@"Common_About_TouchID_Login", nil) action:@selector(touchIDLinkButtonAction:) rightEdge:linkRightEdge]];
     ```

6. **Text**: `NSLocalizedString(@"Common_About_FaceID_Login", nil)`
   - **Context**: Used for the link text about Face ID login.
   - **Code**:
     ```objc
     [stackView addView:[self linkText:NSLocalizedString(@"Common_About_FaceID_Login", nil) action:@selector(faceIDLinkButtonAction:) rightEdge:linkRightEdge]];
     ```




In UIUXQLRegistrationCompleteView.m file:
Based on the provided code, here are the lists of non-localized hardcoded user-facing texts and localized user-facing texts, with images avoided as per your preference:

### Non-Localized Hardcoded User-Facing Texts:
There are no non-localized hardcoded user-facing texts found in the provided code.

### Localized User-Facing Texts:
1. **Text**: `NSLocalizedString(@"UI0007_Text1", nil)`
   - **Context**: Used for the first message text displayed on the view.
   - **Code**:
     ```objc
     UILabel * text1 = [self uiLableWithWidth:VIEW_WIDTH_LEVEL2
                                        text:[NSString stringWithFormat:
                                              NSLocalizedString(@"UI0007_Text1", nil),
                                              NSLocalizedString(@"Common_QuickLogin", nil)]
                                   textColor:[ColorUtil textColorLightGreen]
                                    fontSize:23.0f
                                      isbold:NO];
     ```




GENERAL NOTE:
Based on the iOS code samples provided, it seems that the localization has been handled quite thoroughly. Here are some key points that support this conclusion:

1. **Use of NSLocalizedString**: The code consistently uses `NSLocalizedString` for user-facing texts, which is a standard approach in iOS development to facilitate localization. This indicates that the code is already set up to support multiple languages.

2. **Dynamic Text Construction**: Where necessary, the code constructs strings dynamically using localized components, ensuring that even combined texts are correctly localized.

3. **Separation of Concerns**: The code makes good use of utility methods and localization resources, keeping the logic separate from the content, which is a good practice in localization.

4. **Minimal Hardcoded Texts**: There are very few instances of hardcoded, non-localized user-facing text, and those that exist are minimal and could be addressed easily if needed.

### Conclusion
Given the evidence from the provided code, it is reasonable to conclude that the iOS codebase is already well-prepared for localization. It likely does not require significant further localization efforts unless there are new features or components being added that introduce additional user-facing text. 

If any new content or user-facing text is introduced in the future, it would be important to ensure that these follow the same localization practices as the existing code.