Requirements Specification for the AutoLoc App:

Overview:

AutoLoc is a sophisticated app designed for automating the localization process of websites and mobile apps. It extracts all translatable texts from the website's or mobile app's source code across various file types and converts them into JSON files, facilitating easy translation. The application is developed using PySide6 Python framework and other relevant Python libraries.

Key Features:

Automatic Text Extraction:

Supports multiple file types.
Extracts translatable texts into JSON files for each specified file type.
Users can define which file types to localize.

Localized Text Rendering:

The extracted texts in JSON format can be rendered back into the website or mobile app, maintaining the correct localization.

Class-based File Handling:

Each file type has a specific class that manages its localization process, ensuring appropriate handling according to file type characteristics.

Installation and Compatibility:

Compatible with all major operating systems.
Includes an installer that handles the installation of all dependencies.
The app is accessible via a UI icon, making it user-friendly and easy to execute.

Usage:

Upon launching, users can select the website's or mobile app's root directory through a provided button.
The chosen path is registered as the source directory.
A "locales" directory is created within this source directory to store resource files for each locale.
AutoLoc streamlines the localization workflow, making it a vital tool for developers aiming to internationalize their source code efficiently.

App Code File Structure:

The following definitions describe the source code structure of the AutoLoc app:

- AutoLoc
    - app_ui
        - main_app_window.py
            - MainAppWindow: class
        - header.py 
            - HeaderWidget: class 
        - side_bar.py 
            - SideBarWidget: class
        - footer.py 
            - FooterWidget: class
        - settings.py
            - SettingsWidget: class
        - projects.py
            - ProjectsWidget: class
        - project.py
            - ProjectWidget: class
        - add_project.py
            - AddProjectWidget: class
        - update_project.py
            - UpdateProjectWidget: class
        - source_code.py
            - ProjectSourceCodeWidget: class
        - add_source_code.py
            - AddProjectSourceCodeWidget: class
        - update_source_code.py
            - UpdateProjectSourceCodeWidget: class
        - slyles.py 
            - Styles: class 

    - managers
        - app_manager.py
            - AppManager: class
        - db_manager.py
            - DBManager: class
        - setting_manager.py
            - SettingManager: class
        - project_manager.py 
            - ProjectManager: class
        - file_manager.py
            - FileManager: class
        - l10n_manager.py 
            - L10nManager: class 
        

    - localizers
        - parser_based_localizer.py
            - ParserBasedLocalizer: class
        - regex_based_localizer.py
            - RegExBasedLocalizer: class
        - hybrid_based_localizer.py
            - HybridBasedLocalizer: class
        - duplication_based_localizer.py
            - DuplicationBasedLocalizer: class

    - autoloc.py (app's starter)


Code and Functionality Definitions:

App's starter file:

autoloc.py 
    - Calls the AppManager to execute startup procedures before calling the MainAppWindow to show the app's UI:
        - The AppManager ensures the following at the AutoLoc app startup:
            - There must be an "AutoLoc" directory created during the app's installation in the host operating system (OS). The AppManager checks if this directory exists, otherwise it creates it. 
            - The AppManager checks if there is an "autoloc.db" file inside the "AutoLoc/DB/" directory created during installation of the app on the host OS, otherwise, it creates it at app startup by calling the DBManager to create the DB file.
            - The AppManager throws and shows errors in QMessageBox if there is any Exception/Error preventing the above procedures. The AppManager class should all the different and possible Exceptions/Errors handling logic to display in a QMessageBox if they occur. The QMessageBox should also advise the user on what to do to mitigate and fix the error. 

    - Calls the MainAppWindow and executes the Application to start the UI if the AppManager passes on all its startup procedures without any failure.

    - Note that the autoloc.py file is the AutoLoc app's only entry point.




Class Definitions:

The following is the definition of each class's functionality and implementation logic. The classes are developed in the following logical order to faciliate a smooth definition of the interrelationship among them. Inheritances will be explicitly defined by indicating which class inherits which class in the following definiton. Each class's functionality will also be described and finetuned as appropriate during the course of development. The logical order in which classes are defined is as follows:
- managers module classes
- localizers module classes
- app_ui module classes 




Classes: managers module classes:

    - AppManager class:
        - The AppManager ensures the following at the AutoLoc app startup:
            - There must be an "AutoLoc" directory created during the app's installation in the host operating system (OS). The AppManager checks if this directory exists, otherwise it creates it. 
            - The AppManager checks if there is an "autoloc.db" file inside the "[Host OS User Data Directory]AutoLoc/Data/DB/" directory created during installation of the app on the host OS, otherwise, it creates it at app startup by calling the DBManager to create the DB file.
            - The AppManager throws and shows errors in QMessageBox if there is any Exception/Error preventing the above procedures. The AppManager class should all the different and possible Exceptions/Errors handling logic to display in a QMessageBox if they occur. The QMessageBox should also advise the user on what to do to mitigate and fix the error.
        
        - The AppManager is responsible for any OS specific definitions such as the creation of the "[Host OS User Data Directory]AutoLoc/Data/" directory based on the host OS the app is running. The [Host OS User Data Directory] represents any OS (Windows, Mac, and Linux) user data directory.

        - It also defines and executes the following functions and functionalities:
            - initialize_app() function which checks and makes sure of the above. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the MainAppWindow class.

            - The initialize_app() function may call any number of other functions of the AppManager class to do its tasks.
    


    - DBManager class:
        - Executes the following at its initialization:
            - Creates an SQLite DB file and save it as "[Host OS User Data Directory]AutoLoc/DB/autoloc.db"
            - Runs the create_db() function that creates the SQLite DB. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the MainAppWindow class.
            - Runs the create_default_tables() function that creates the default tables of the DB. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the MainAppWindow class. 
            - Runs the insert_default_records() function that inserts all default table records in the DB. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the MainAppWindow class.

        - Creates the following tables if not exist in the create_default_tables() function:

            - app_settings:
                - id (primary key, autoincrement)
                - ui_mode ("Light Mode" or "Dark Mode" - default = Light Mode)

            - locales:
                - id (primary key, autoincrement)
                - full_name
                - language_code
                - country_code
                - UNIQUE(name, language_code, country_code)
            
            - file_types:
                - id (primary key, autoincrement)
                - name
                - extension
                - category ("Code", "Resource")
                - l10n_mode ("Parser", "RegEx", "Hybrid", "Duplication")
                - string_resource_format ("None", "Web (JSON)", "Android (XML)", "iOS (Strings)", "JavaServer Faces (Properties)")
                - save_pattern ("None", "Saved Next to Original", "Saved in Locales Directory", "Android", "iOS", "JavaServer Faces", etc.)
                - source_code_id 
                - UNIQUE(name, extension, source_code_id)
                - FOREIGN KEY(source_code_id) REFERENCES source_codes(id)
            
            - parser_target_patterns:
                - id (primary key, autoincrement)
                - name
                - target_tags (comma-separated list of tags to target)
                - embedded_tags (comma-separated lis of formatting tags) (Nullable field)
                - marker (the marking string)
                - replacement (the replacement string)
                - active (True/False - Default: False)
                - file_type_id
                - UNIQUE(name, file_type_id)
                - FOREIGN KEY(file_type_id) REFERENCES file_types(id)
            
            - regex_target_patterns:
                - id (primary key, autoincrement)
                - name
                - target_regex (the regex to match in file)
                - replacement (the replacement string)
                - active (True/False - Default: False)
                - file_type_id
                - UNIQUE(name, file_type_id)
                - FOREIGN KEY(file_type_id) REFERENCES file_types(id)
            

            - projects:
                - id (primary key, autoincrement)
                - name
                - unique_id (hidden field, autogenerated in code logic)
                - client
                - description
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress"
                - start_date
                - end_date
                - last_updated_date_time
                - lead_egineer 
                - UNIQUE(name, client, unique_id)

            - source_codes:
                - id (primary key, autoincrement)
                - project_id
                - name
                - unique_id (hidden field, autogenerated in code logic)
                - description
                - source_locale
                - original_source_code_path (hidden field to be set by the FileManager class later)
                - original_commons_paths (hidden field to be set by the FileManager class later)
                - localized_source_code_path (hidden field to be set by the FileManager class later)
                - localized_commons_paths (hidden field to be set by the FileManager class later)
                - locales_path (hidden field to be set by the FileManager class later)
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress" 
                - notes (optional)
                - repository_link (optional)
                - tms (optional)
                - UNIQUE(project_id, name, unique_id, source_locale)
                - FOREIGN KEY(project_id) REFERENCES projects(id)
            
            - source_code_file_types:
                - id (primary key, autoincrement)
                - source_code_id
                - file_type_id 
                - UNIQUE(source_code_id, file_type_id)
                - FOREIGN KEY(source_code_id, file_type_id) REFERENCES source_codes(id), file_types(id)
            

            - source_code_target_locales:
                - id (primary key, autoincrement)
                - source_code_id
                - locale_id
                - UNIQUE(source_code_id, locale_id)
                - FOREIGN KEY(source_code_id, locale_id) REFERENCES source_codes(id), locales(id)

        - Inserts the following records in the insert_default_records() function:
            - locales = [
                ('Japanese', 'ja', 'JP'),
                ('English', 'en', 'US'),
                ('Simplified Chinese', 'zh', 'CN'),
                ('Traditional Chinese', 'zh', 'TW'),
                ('Korean (South Korea)', 'ko', 'KR')
            ]
        
        - Defines the reset_db() function to delete and recreate the DB file, the tables, and the default records. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class.
        - Defines the following functions for general data management of any table in the DB:
            - get_record() to get any record from any table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class.
            - get_records() to get all records from any table in a list. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class.
            - insert_record() to insert any record in any table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class. 
            - update_record() to update any record in any table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class.
            - delete_record() to delete any record in any table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class.
            - delete_records() to delete all records in any table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in an external QWidget class.
        
    

    - SettingManager class:
        - The SettingManager uses the DBManager, defines, and manages the CRUD functionality for the "app_settings" and the "locales" tables in the DB using the DBManager methods.
        - It creates and manages the following:
            - set_ui_mode() to toggle the app's UI mode between "Light Mode" and "Dark Mode" in the app_settings table, ui_mode column 
            - get_locale() to get any specific locale from the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class.
            - get_locales() to get all the locales from the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class. 
            - add_locale() to add a new locale record to the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class.
            - update_locale() to update any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class.
            - delete_locale() to delete any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class. 
            _ delete_locales() to delete all locales in the locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the SettingsWidget class.
    


    - ProjectManager class:
        - It manages all the projects in the AutoLoc app.
        - It uses the DBManager to define and execute all CRUD functionalities for projects.
        - It defines and execute the following functions and functionalities:
            For projects table records management:
            - get_project() to get any specific project from the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectWidget class and the ProjectsWidget class. 
            - get_projects() to get all the projects from the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectsWidget class. 
            - add_project() to add a new project record to the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the AddProjectWidget class.  
            - update_project() to update any project record in the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the EditProjectWidget class.  
            - delete_project() to delete any project record from the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectWidget class. 
            _ delete_projects() to delete all projects from the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectsWidget class.  

            For source_codes table records management:
            - get_source_code() to get any specific source_code from the source_codes table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - get_source_codes() to get all the source_codes of a specific project from the projects table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectWidget class. 
            - add_source_code() to add a new source_code record for a specific project to the source_codes table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the AddProjectSourceCodeWidget class. 
            - update_source_code() to update any source_code record of a specific project in the source_codes table. It also uses FileManager class to delete and replace the source_code files with the new submitted file path's contents. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the EditProjectSourceCodeWidget class. 
            - delete_source_code() to delete any source_code record of a specific project from the source_codes table. It also deletes the source_code's files using the FileManager class passing the source_code_id to it. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            _ delete_source_codes() to delete all source_codes of a specific project from the source_codes table. It also deletes the source_codes' files using the FileManager class passing the source_code_id to it for each iteration.This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectWidget class.

            For source_code_file_types table records management:
            - get_source_code_file_type() to get any specific source_code_file_type from the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - get_source_code_file_types() to get all the source_code_file_types of a specific source_code from the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - add_source_code_file_type() to add a new source_code_file_type record for a specific source_code to the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - update_source_code_file_type() to update any source_code_file_type record of a specific source_code in the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - delete_source_code_file_type() to delete any source_code_file_type record of a specific source_code from the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            _ delete_source_code_file_types() to delete all source_code_file_types of a specific source_code from the source_code_file_types table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 

            For source_code_target_locales table records management:
            - get_source_code_target_locale() to get any specific source_code_target_locale from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - get_source_code_target_locales() to get all the source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - add_source_code_target_locale() to add a new source_code_target_locale record for a specific source_code to the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - update_source_code_target_locale() to update any source_code_target_locale record of a specific source_code in the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            - delete_source_code_target_locale() to delete any source_code_target_locale record of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
            _ delete_source_code_target_locales() to delete all source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 



    - FileManager class:
        - The FileManager defines and executes all file management procedures of the app except the default "[Host OS User Data Directory]AutoLoc/Data/" directory creation handled by the AppManager class. 
        - It uses the ProjectManager class. 
        - It takes source_code_id as argument at initialization.
        - It defines and executes the following functions and functionalities:

            - It should use the source_code_id to set for any project source code:
                - the original_source_code_path variable targetting the "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Original_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.
                - the localized_source_code_path variable targetting "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Localized_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.
                - the locales_path variable targetting "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Localized_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/locales/" directory.

            - copy_source_code(path) funtion to take in any project source code path and copies all its files maintaining the directories and files patterns of the source code into the original_source_code_path.
            It then copies all the contents of the original_source_code_path to the localized_source_code_path. Note the path argument is captured from a file selection dialog field from ProjectSourceCodeWidget class. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - set_source_code_paths() function to save the original_source_code_path, the localized_source_code_path, and the locales_path for the specific source_code to the DB based on its ID. This function should update the project source code's records in the DB. It should be executed immediately after copy_source_code() function execution.
            This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - set_source_code_commons_paths(commons_paths) function to receive and save the original_commons_paths list to DB and use them to define and save the localized_commons_paths list for the specific source_code to the DB based on its ID. This function should update the project source code's records in the DB. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code() function to get and return a specific project source code. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_original_path() function to get and return a specific project source code's original_source_code_path. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_localized_path() function to get and return a specific project source code's localized_source_code_path. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_locales_path() function to get and return a specific project source code's locales_path. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_original_commons_paths() function to get and return a specific project source code's original_commons_paths. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_localized_commons_paths() function to get and return a specific project source code's localized_commons_paths. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_file_types() function to get and return all the defined file types for a specified project source code by ID from the DB in a list. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.
            
            - get_source_code_source_locale() function to get and return the defined source locale for a specific project source code by ID from the DB. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.
            
            - get_source_code_target_locales() function to get and return all the defined target locales for a specific project source code by ID from the DB in a list. This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

            - get_source_code_parser_files() function to get and return all the file paths of whose file type's l10n_mode is "Parser", fetched from get_source_code_original_path() in groups from a specific project source code. It should return a list of dictionaries of all the files organized by file type using their file type name to group them in the dictionary. The dictionary should have the following keys:
                - extension: the file extension of the group
                - count: number of files in the group
                - category: the category of the file type 
                - l10n_mode: the file type l10n mode 
                - save_pattern: the file type's save pattern 
                - file_paths: the absolute paths of the files grouped in a list
            This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 

            - get_source_code_regex_files() function to get and return all the file paths of whose file type's l10n_mode is "RegEx", fetched from get_source_code_original_path() in groups from a specific project source code. It should return a list of dictionaries of all the files organized by file type using their file type name to group them in the dictionary. The dictionary should have the following keys:
                - extension: the file extension of the group
                - count: number of files in the group
                - category: the category of the file type 
                - l10n_mode: the file type l10n mode 
                - save_pattern: the file type's save pattern 
                - file_paths: the absolute paths of the files grouped in a list
            This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class. 
        
        - get_source_code_hybrid_files() function to get and return all the file paths of whose file type's l10n_mode is "Hybrid", fetched from get_source_code_original_path() in groups from a specific project source code. It should return a list of dictionaries of all the files organized by file type using their file type name to group them in the dictionary. The dictionary should have the following keys:
                - extension: the file extension of the group
                - count: number of files in the group
                - category: the category of the file type 
                - l10n_mode: the file type l10n mode 
                - save_pattern: the file type's save pattern 
                - file_paths: the absolute paths of the files grouped in a list
            This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.

        - get_source_code_duplication_files() function to get and return all the file paths of whose file type's l10n_mode is "Duplication", fetched from get_source_code_original_path() in groups from a specific project source code. It should return a list of dictionaries of all the files organized by file type using their file type name to group them in the dictionary. The dictionary should have the following keys:
                - extension: the file extension of the group
                - count: number of files in the group
                - category: the category of the file type 
                - l10n_mode: the file type l10n mode 
                - save_pattern: the file type's save pattern 
                - file_paths: the absolute paths of the files grouped in a list
            This function handles and returns all possible exceptions and errors displayable in a QMessageBox in the ProjectSourceCodeWidget class.
        
        - save_file(file_path, save_pattern) function that takes in a file_path and its save_pattern and saves it based on the save pattern logic.
    




Classes: localizers module classes:

    - ParserBasedLocalizer class:
        - The ParserBasedLocalizer class inherits the FileManager class. 
        - It takes in source_code_id as an argument at initialization.
        - It imports and uses BeautifulSoup, lxml, and other relevant Python libraries.
        - It defines and executes the following functions and functionalities:
            - localize_file(file_path, l10n_mode, save_pattern) function that localizes every file from self.get_source_code_parser_files() based on its l10n_mode logic and saves it using self.save_file() method. 
            This function calls other helper functions that implement the following:
                - the use of parser_target_patterns records to mark and extract translatable strings from the file using target_tags, embedded_tags, marker, and replacement to target, mark, and replace the translatable strings. 
                - the marking of translatable strings in HTML and XHTML files 
                - the extraction of translatable strings from the HTML and XHTML files to the string_resource_format of the files group:
                    - if the string_resource_format is:
                        - "None": no marking and extraction is done 
                        - "Web (JSON)": extracted strings are saved in a .json file based on the save_pattern attribute of the dictionary
                        - the rest of the string_resource_format values are catered for.
                        - the save pattern of each type of codebase, e.g. "None", "Saved Next to Original", "Saved in Locales Directory", "Android", "iOS", "JavaServer Faces", etc. are catered for. 



    - RegExBasedLocalizer class:
        - The RegExBasedLocalizer class inherits the FileManager class. 
        - It takes in source_code_id as an argument at initialization.
        - It imports and uses the Python re module and other relevant Python libraries.
        - It defines and executes the following functions and functionalities:
            - localize_file(file_path, l10n_mode, save_pattern) function that localizes every file from self.get_source_code_regex_files() based on its l10n_mode logic and saves it using self.save_file() method. 
            This function calls other helper functions that implement the following:
                - the use of regex_target_patterns records to mark and extract translatable strings from the file using target_regex, replacement, to target, mark, and replace the translatable strings. 
                - the marking of translatable strings in source code files 
                - the extraction of translatable strings from the source code files to the string_resource_format of the files group:
                    - if the string_resource_format is:
                        - "None": no marking and extraction is done 
                        - "Web (JSON)": extracted strings are saved in a .json file based on the save_pattern attribute of the dictionary
                        - the rest of the string_resource_format values are catered for.
                        - the save pattern of each type of codebase, e.g. "None", "Saved Next to Original", "Saved in Locales Directory", "Android", "iOS", "JavaServer Faces", etc. are catered for. 



    - HybridBasedLocalizer class:
        - The HybridBasedLocalizer class inherits both the ParserBasedLocalizer and the RegExBasedLocalizer classes to use their functionalities. 
        - It takes in source_code_id as an argument at initialization.
        - It imports and uses all the relevant Python libraries used by its inherited classes.
        - It defines and executes the following functions and functionalities:
            - localize_file(file_path, l10n_mode, save_pattern) function that localizes every file from self.get_source_code_hybrid_files() based on its l10n_mode logic and saves it using self.save_file() method. 
            This function calls other helper functions that implement the following:
                - the use of both the inherited classes logics to localize a file that needs both Parser and RegEx modes. 
            
    

    - DuplicationBasedLocalizer class:
        - The DuplicationBasedLocalizer class inherits the FileManager class. 
        - It takes in source_code_id as an argument at initialization.
        - It imports and uses all the relevant Python libraries to duplicate the files based on their save_pattern.
        - It defines and executes the following functions and functionalities:
            - localize_file(file_path, l10n_mode, save_pattern) function that localizes every file from self.get_source_code_duplication_files() based on its l10n_mode logic and saves it using self.save_file() method. 
            This function calls other helper functions that implement the following:
                - the implementation logic to duplicate files based on the save_pattern of the returned file types. 
                    
    











