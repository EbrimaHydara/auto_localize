Requirements Specification for the AutoLoc App:

Overview:

AutoLoc is a sophisticated app designed for automating the localization process of websites and mobile apps. It extracts all translatable texts from the website's or mobile app's source code across various file types and converts them into locale resource files, facilitating easy translation. The application is developed using PySide6 Python framework and other relevant Python libraries.

Key Features:

Automatic Text Extraction:

Supports multiple file types.
Extracts translatable texts into resource files for each specified file type.
Users can define which file types to localize.

Localized Text Rendering:

The extracted texts in the appropriate format can be rendered back into the website or mobile app, maintaining the correct localization.

Class-based File Handling:

Each file type has a specific class that manages its localization process, ensuring appropriate handling according to file type characteristics.

Installation and Compatibility:

Compatible with all major operating systems.
Includes an installer that handles the installation of all dependencies.
The app is accessible via a UI icon, making it user-friendly and easy to execute.

App Code File Structure:

The following definitions describe the source code structure of the AutoLoc app:

- AutoLoc

    - app_ui
        - main_app_window.py
            - MainAppWindow: class
        - header.py 
            - HeaderWidget: class 
        - side_bar.py 
            - SideBarWidget: class
        - footer.py 
            - FooterWidget: class
        - home.py 
            - HomeWidget: class  
        - settings.py
            - SettingsStackedWidget: class 
            - SettingsWidget: class 
            - LocalesWidget: class
            - LocaleWidget: class
            - AddLocaleWidget: class
            - UpdateLocaleWidget: class       
        - projects.py
            - ProjectsStackedWidget: class 
            - ProjectsWidget: class
            - ProjectWidget: class
            - AddProjectWidget: class
            - UpdateProjectWidget: class
        - source_codes.py
            - SourceCodesStackedWidget: class 
            - SourceCodesWidget: class
            - SourceCodeWidget: class
            - AddSourceCodeWidget: class
            - UpdateSourceCodeWidget: class
            - SourceCodeTargetLocalesWidget: class 
            - SourceCodeTargetLocaleWidget: class 
            - AddSourceCodeTargetLocaleWidget: class 
            - UpdateSourceCodeTargetLocaleWidget: class 
        - l10n.py 
            - L10nWidget: class 
        - slyles.py 
            - Styles: class 

    - managers
        - app_manager.py
            - AppManager: class
        - db_manager.py
            - DBManager: class
        - setting_manager.py
            - SettingManager: class
        - project_manager.py 
            - ProjectManager: class
        - source_code_manager.py 
            - SourceCodeManager: class 
        - file_manager.py
            - FileManager: class 
        - l10n_manager.py 
            - L10nManager: class 

    - localizers
        - web_localizers
            - web_app_based_localizer.py 
                - WebAppBasedLocalizer: class
            - web_app_file_handler.py 
                - WebAppFileHandler: class
            - web_app_html_file_handler.py 
                - WebAppHTMLFileHandler: class
            - web_app_js_file_handler.py 
                - WebAppJSFileHandler: class 
            - web_app_ejs_file_handler.py
                - WebAppEJSFileHandler: class 
            - web_app_jsx_file_handler.py
                - WebAppJSXFileHandler: class 
            - web_app_ts_file_handler.py 
                - WebAppTSFileHandler: class 
            - web_app_tsx_file_handler.py 
                - WebAppTSXFileHandler: class
            - web_app_vue_file_handler.py 
                - WebAppVueFileHandler: class 
            - web_app_json_file_handler.py 
                - WebAppJSONFileHandler: class 
            - web_app_csv_file_handler.py 
                - WebAppCSVFileHandler: class

        - android_localizers
            - android_app_based_localizer.py 
                - AndroidAppBasedLocalizer: class
            - android_app_file_handler.py 
                - AndroidAppFileHandler: class 
            - android_app_xml_file_handler.py 
                - AndroidAppXMLFileHandler: class
            - android_app_java_file_handler.py 
                - AndroidAppJavaFileHandler: class 
            - android_app_kotlin_file_handler.py 
                - AndroidAppKotlinFileHandler: class 

        - ios_localizers
            - ios_app_based_localizer.py
                - IOSAppBasedLocalizer: class
            - ios_app_file_handler.py 
                - IOSAppFileHandler: class 
            - ios_app_swift_file_handler.py 
                - IOSAppSwiftFileHandler: class 
            - ios_app_objc_m_file_handler.py 
                - IOSAppObjcMFileHandler: class 
            - ios_app_objc_h_file_handler.py 
                - IOSAppObjcHFileHandler: class 
            - ios_app_strings_file_handler.py 
                - IOSAppStringsFileHandler: class
            - ios_app_storyboard_file_handler.py 
                - IOSAppStoryboardFileHandler: class
            - ios_app_xib_file_handler.py 
                - IOSAppXIBFileHandler: class
            - ios_app_plist_file_handler.py 
                - IOSAppPListFileHandler: class
            
        - java_localizers
            - java_app_based_localizer.py
                - JavaAppBasedLocalizer: class 
            - java_app_xhtml_file_handler.py
                - JavaAppXHTMLFileHandler: class 
            - java_app_xml_file_handler.py
                - JavaAppXMLFileHandler: class 
            - java_app_java_file_handler.py
                - JavaAppJavaFileHandler: class 
            - java_app_properties_file_handler.py
                - JavaAppPropertiesFileHandler: class 
            
    - autoloc.py (app's starter)


Code and Functionality Definitions:

Class Definitions:

The following is the definition of each class's functionality and implementation logic. The classes are developed in the following logical order to faciliate a smooth definition of the interrelationship among them. Inheritances will be explicitly defined by indicating which class inherits which class in the following definiton. Each class's functionality will also be described and finetuned as appropriate during the course of development. The logical order in which classes are defined is as follows:
- managers module classes
- localizers module classes
- app_ui module classes 




Classes: managers module classes:

    - AppManager class:
        - The AppManager ensures the following at the AutoLoc app startup:
            - There must be a "[Host OS User Data Directory]AutoLoc/" directory created during the app's installation in the host operating system (OS). The AppManager checks if this directory exists, otherwise it creates it. 

            - The AppManager checks if there is an "autoloc.db" file inside the "[Host OS User Data Directory]AutoLoc/Data/DB/" directory created during installation of the app on the host OS, otherwise, it creates it at app startup by calling the DBManager to create the DB file.

            - The AppManager handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class if there is any Exception/Error preventing the above procedures.
        
        - The AppManager is responsible for any OS specific definitions such as the creation of the "[Host OS User Data Directory]AutoLoc/Data/" directory based on the host OS the app is running. The [Host OS User Data Directory] represents any OS (Windows, Mac, and Linux) user data directory.

        - It also defines and executes the following functions and functionalities:

            - initialize_app() function which checks and makes sure of the above. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - The initialize_app() function may call any number of other functions of the AppManager class to do its tasks.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed in the MainAppWindow class that will call this class and its functions.
    


    - DBManager class:
        - Executes the following at its initialization:

            - Creates an SQLite DB file and save it as "[Host OS User Data Directory]AutoLoc/DB/autoloc.db".

            - Runs the create_db() function that creates the SQLite DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class.

            - Runs the create_tables() function that creates the default tables of the DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - Runs the insert_records() function that inserts all default table records in the DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed later in a QWidget class that will call this class and its functions.

        - Creates the following tables if not exist in the create_tables() function:

            - ui_modes:
                - id (primary key, autoincrement)
                - mode ("Light Mode" or "Dark Mode" - default = Light Mode)

            
            - l10n_settings:
                - id (primary key, autoincrement)
                - html_is_duplicated (True, False, default=False)
                - key_format ("Simple Key", "Namespaced Key with File Path")


            - locales:
                - id (primary key, autoincrement)
                - name (English (United States))
                - code (en-US)
                - UNIQUE(name, code)
            

            - projects:
                - id (primary key, autoincrement)
                - name
                - unique_id (hidden field, autogenerated in code logic)
                - client
                - description
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress"
                - start_date
                - end_date
                - last_updated_date
                - lead_egineer 
                - UNIQUE(name, client, unique_id)


            - source_codes:
                - id (primary key, autoincrement)
                - project_id
                - name
                - unique_id (hidden field, autogenerated in code logic using datetime as "YYYYMMDDHis")
                - type (Web, Android, iOS, Java App)
                - source_locale (ja-JP, en-US, zh-CN)
                - original_source_code_path (Nullable and hidden field to be set by the FileManager class later)
                - commons_paths (Nullable and hidden field to be set by the FileManager class later)
                - localized_source_code_path (Nullable and hidden field to be set by the FileManager class later)
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress" 
                - notes (Nullable and optional)
                - UNIQUE(project_id, name, unique_id, source_locale)
                - FOREIGN KEY(project_id) REFERENCES projects(id)
            

            - source_code_target_locales:
                - id (primary key, autoincrement)
                - name
                - code
                - source_code_id
                - UNIQUE(name, code, source_code_id)
                - FOREIGN KEY(source_code_id) REFERENCES source_codes(id)
            

        - Inserts the following records in the insert_records() function:
            - ui_modes = [
                ('Light Mode'),
                ('Dark Mode')
            ]

            - l10n_settings = [
                ('False'),
                ('Simple Key')
            ]

            - locales = [
                ('Japanese', 'ja-JP'),
                ('English (US)', 'en-US'),
                ('Simplified Chinese (CN)', 'zh-CN'),
                ('Traditional Chinese (TW)', 'zh-TW'),
                ('Korean (South Korea)', 'ko-KR')
            ]
        
        - Defines the reset_db() function to delete and recreate the DB file, the tables, and the default records. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Defines the following functions for general data management of any table in the DB:

            - get_record() to get any record from any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - get_records() to get all records from any table in a list. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - insert_record() to insert any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class. 

            - update_record() to update any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_record() to delete any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_records() to delete all records in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.
        
    

    - SettingManager class:
        - The SettingManager uses the DBManager to define and execute all its CRUD functionalities. It defines and manages the CRUD functionality for the app_settings tables in the DB using the DBManager methods.

        - It creates and manages the following functions and functionalities:

            - set_ui_mode() function to toggle the app's UI mode between "Light Mode" and "Dark Mode" in the app_settings table, ui_mode column. This function uses the Styles class of the app_ui module to set the Light or Dark mode of the Styles class.

            - set_html_is_duplicated() function to toggle the setting of html_is_duplicated column value in l10n_settings table in the DB to either True or False.

            - html_is_duplicated() function to return the value of html_is_duplicated column of the l10n_settings table in the DB. 

            - set_key_format() function to set the key_format value of the l10n_settings table in the DB.

            - get_key_format() function to get the key_format value of the l10n_settings table from the DB. 

            - reset_db() function call from the DBManager to execute its logic. This function is just a wrapper function for the DBManager's reset_db() function. 

            - get_locales() to get all the locales from the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_locale() to get any specific locale from the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - add_locale() to add a new locale record to the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - update_locale() to update any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - delete_locale() to delete any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            _ delete_locales() to delete all locales in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - ProjectManager class:
        - It manages all the projects in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the projects table in the DB.

        - It defines and execute the following functions and functionalities:

            - get_projects() to get all the projects from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_project() to get any specific project from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - add_project() to add a new project record to the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_project() to update any project record in the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.  

            - delete_project() to delete any project record from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_projects() to delete all projects from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.  

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - SourceCodeManager class:
        - It manages all the source codes in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the source_codes table in the DB.

        - It takes in project_id argument at initialization.

        - It defines and execute the following functions and functionalities:

            - get_source_codes() to get all the source_codes of a specific project from the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_source_code() to get any specific source_code from the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - add_source_code() to add a new source_code record for a specific project to the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_source_code() to update any source_code record of a specific project in the source_codes table. It also uses FileManager class to delete and replace the source_code files with the new submitted file path's contents. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - delete_source_code() to delete any source_code record of a specific project from the source_codes table. It also deletes the source_code's files using the FileManager class passing the source_code_id to it. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_source_codes() to delete all source_codes of a specific project from the source_codes table. It also deletes the source_codes' files using the FileManager class passing the source_code_id to it for each iteration.This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_source_locale() to get the source_code source locale from the source_code's record. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_target_locales() to get all the source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_source_code_target_locale() to get any specific source_code_target_locale from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - add_source_code_target_locale() to add a new source_code_target_locale record for a specific source_code to the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_source_code_target_locale() to update any source_code_target_locale record of a specific source_code in the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - delete_source_code_target_locale() to delete any source_code_target_locale record of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_source_code_target_locales() to delete all source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.

            

    - FileManager class:
        - The FileManager defines and executes all file management procedures of the app except the default "[Host OS User Data Directory]AutoLoc/Data/" directory creation handled by the AppManager class. 
        - It inherits the SourceCodeManager class.
        - It uses the project's and the source code's unique_id fields in the creation of the original_source_code_path and the localized_source_code_path variables.
        - It defines and executes the following functions and functionalities:

            - Execute the following at initialization:
                - Define variables:
                    - source_code_upload_path 
                    - original_source_code_path
                    - localized_source_code_path
                    - source_code_commons_paths list 
                
                - Call the following functions:
                    - get_source_code()
                    - set_source_code_paths()
                    - set_source_code_commons_paths()

            
            - get_source_code_files(source_code_upload_path) function to get the source code from the AddSourceCodeWidget class form's file dialog for a path. This function should also check if the provided path is empty or has files in it. If the path has files, this function should call copy_source_code_files() function to copy all the source code files according to its logic. 
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - set_source_code_paths() function to perform the following only if source_code_upload_path is not empty:
                - Initialize and assign the veriables:
                    - original_source_code_path = "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Original_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.

                    - localized_source_code_path = "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Localized_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.
                
                - Update the following records for the source code based on its ID in the DB:
                    - original_source_code_path
                    - localized_source_code_path
                
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - set_source_code_commons_paths(commons_paths list) function to perform the following only if commons_paths is not empty:
                - Initialize and assign the veriable:
                    - source_code_commons_paths = commons_paths
                
                - Update the following record for the source code based on its ID in the DB:
                    - source_code_commons_paths
                
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_original_source_code_path() function to get and return a specific project source code's original_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_localized_source_code_path() function to get and return a specific project source code's localized_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_commons_paths() function to get and return a specific project source code's source_code_commons_paths list. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - copy_source_code_files(source_code_upload_path) funtion to copy all the files from the source_code_upload_path maintaining the directories and files patterns of the source code into the original_source_code_path.
            It then copies all the contents of the original_source_code_path to the localized_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - L10nManager class:
        - The L10nManager defines and executes all localization management procedures of the app. 
        - It inherits the FileManager class.
        - It defines and executes the following functions and functionalities:
            - reset_l10n() function to delete all the contents of the localized_source_code_path and then copy all the contents of the original_source_code_path to the localized_source_code_path. 
            
            - localize_source_code() function to do the following:

                - Calls the reset_l10n() function to delete and recopy all the contents of the localized_source_code_path from the original_source_code_path. 

                - Calls the required classes from the localizers module to localize the files based on the source code's "type" attribute value. The specific class from the localizers module is called based on the "type" attribute of the source code as follows:
                    - if type = "Web App", then WebAppBasedLocalizer is called 
                    - if type = "Android App", then AndroidAppBasedLocalizer is called 
                    - if type = "iOS App", then IOSAppBasedLocalizer is called 
                    - if type = "Java App", then JavaAppBasedLocalizer is called
            When the function calls the appropriate class based on the source code's type attribute value, it passes it all the required arguments to initialize and execute its localization logic.  
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.




Classes: localizers module classes:

    - web_localizers sub-module classes:

        - WebAppBasedLocalizer class:
            - The WebAppBasedLocalizer is the class responsible for localizing the source code having type = "Web App".
            - It inherits the FileManager class.
            - It implements and executes the following functions and functionalities:
                - get_file_type_counts() function to get all the file paths from the original_source_code_path and count each file type based on their file extension and record the count of each file extension in a the dictionary it returns.

                - process_l10n() function that gets the dictionary returned from get_file_type_counts() function and if it is not empty, it executes the required file handler class for every file extension whose count is greater than zero. It uses if statements to control which classes gets executed only when its corresponding file extension count is greater than zero. If all none of the file extension counts is greater than zero, then this function throws and returns the necessary errors/exceptions. 
                This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.
            
            - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.
    


        - WebAppFileHandler class: 
            - The WebAppFileHandler class is the base class for all web app file type handler classes. 
            - It inherits FileManager class 
            - It implements and executes the following functions and functionalities:
                - It initializes the SettingManager class and assign a variable to use some of its functions. 

                - It defines and creates locales_path variable as localized_source_code_path/locales/ at initialization.

                - get_locales_path() function to return the locales folder path. 

                - get_files_by_extension(extension) function to get and return all the file paths of the files with the parsed extension argument from the localized_source_code_path. The files paths must start from the same level where the locales_path is situated. For example, if locales_path is "source_code_dir/locales/", then all files paths collected by this function should start from "source_code_dir/the/file/path/filename.extension". 

                - generate_key() function to generate and return a unique string identifier key that will be assigned to either "data-i18n" attributes of HTML files, or non-namespaced keys in localized files. The key generated should be in the format: "str-1", "str-2", "str-3", etc. continuously attaching the number sequence during the process to "str".

                - generate_namespaced_key(file_path) function to generate and return a unique string identifier key that will either be assigned to "data-i18n" attributes of HTML files, or replace the extracted strings from the file being processed. The file_path is the file being processed. The key generated should be in the format: "file_path:unique_id" where unique_id is in the format: "str-1", "str-2", "str-3", etc. continuously attaching the number sequence during the process to "str". 

                - save_resource_file(data, locale, file, locale_type) function to save an extracted file's strings in JSON data format to a JSON file for the specified locale. The parameters are explained as follows: 
                    - :param data: The JSON data to save.
                    - :param locale: The locale information.
                    - :param file: The path to the file being processed.
                    - :param locale_type: The type of locale ('source' or 'target')
                The functions saves the JSON resource file as locales_path/[locale's code]/[file's path without the extension].json. The [locale's code] stand for any locale code such as ja-JP, en-US, zh-CN, etc. for each locale (either source or target locale) specified in the parameters. The [file's path without extension] stands for the file's path being processed but without its extension (e.g. removing the .html) and replace the extension with .json and save the JSON data inside the JSOn file created and saved to the locales folder using the locales_path. 
                This is just an example of implementation for the above function but please adopt it as appropriate for this class:
                    - def save_resource_file(self, data, locale, html_file, locale_type):
                        """
                        Saves the data to a JSON file for the specified locale.

                        :param data: The data to save.
                        :param locale: The locale information.
                        :param html_file: The path to the HTML file being processed.
                        :param locale_type: The type of locale ('source' or 'target').
                        """
                        language_code, country_code = locale[2], locale[3]
                        json_dir = os.path.join(self.locales_dir, f'{language_code}')
                        json_path = os.path.join(json_dir, f'html_strings_{language_code}_{country_code}.json')
                        os.makedirs(os.path.dirname(json_path), exist_ok=True)

                        if os.path.exists(json_path):
                            with open(json_path, 'r', encoding='utf-8') as file:
                                existing_data = json.load(file)
                        else:
                            existing_data = {}

                        for html_file_key, translations in data.items():
                            if html_file_key not in existing_data:
                                existing_data[html_file_key] = {}
                            existing_data[html_file_key].update(translations)

                        with open(json_path, 'w', encoding='utf-8') as file:
                            json.dump(existing_data, file, ensure_ascii=False, indent=4)
                    Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 

                - show_progress(files) function to send a QSignal to the L10nWidget class showing the progress in percentage of how many files have been successfully processed. The progress is displayed in a QProgressbar with white colored bar showing a progressive green color filling from left to right based on how much percentage has been completed of the processed files from 0% to 100%. The files parameter is a list of file paths.
        


        - WebAppHTMLFileHandler class:
            - The WebAppHTMLFileHandler handles all HTML file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.target_tags = ['title', 'div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'pre', 'blockquote', 'li', 'figcaption', 'caption', 'td', 'th', 'label', 'option']
                    
                    - self.special_tags = ['meta', 'img']

                    - self.nav_tags = ['a', 'button']
                    
                    - self.formatting_tags = ['span', 'br', 'b', 'strong', 'i', 'em', 'mark', 'small', 'del', 'ins', 'sub', 'sup', 'u', 's', 'abbr', 'code', 'kbd', 'samp', 'var', 'cite', 'q', 'dfn', 'time', 'bdi', 'bdo', 'ruby', 'rt', 'rp', 'wbr']

                    - self.html_files = self.get_files_by_extension('.html')

                - Please use the HTMLFileLocalizer class as a sample class for the WebAppHTMLFileHandler class with the following differences in the WebAppHTMLFileHandler:
                    - If the SettingManager html_is_duplicated is equal to True, the localized HTML file version is duplicated and saved for each locale (source and target locales), otherwise, only the source locale's HTML version is saved to replace the original version. 
                    - Adopt the following functions logic in definition, calling, and usage from the HTMLFileLocalizer class as appropriate for the WebAppHTMLFileHandler class:
                        - localize_html_files()
                        - _process_html_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of generate_short_uuid() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "html-str-", "html-meta-", or "html-alt-" and similar  parts of the keys in this class. 
                        - _duplicate_html_file() only if SettingManager html_is_duplicated() is equal to True, otherwise, only the localized original is saved.
                        - _has_nav_or_formatting_tags()
                        - _has_target_formatting_or_special_tags()
                        - _is_inside_nav_or_formatting_tags()
                        - _is_inside_nav_tags()
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of generate_short_uuid() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "html-str-", "html-meta-", or "html-alt-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_html_file() but do not duplicate the HTML unless the SettingManager html_is_duplicated() is True. 
                        - DO NOT implement nor use the following functions and logics from the HTMLFileLocalizer class:
                            - _create_load_translations_js_file()
                            - _write_report()
                            - _is_duplicate()
                            - _insert_i18next_logic()
                            - _insert_navigation_links()
                            - insert_links()
                            - _get_locale_file_path()
                            - _get_seo_url()
                            - contains_translatable_tags()
                        
                        - Please make sure all the other requirements are met by the WebAppHTMLFileHandler that you deem appropriate for its functionalities.




        - WebAppJSFileHandler: class
            - The WebAppJSFileHandler handles all JS file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>\s*(.*?)\s*<'),               # Matches HTML content between tags
                        ]
                    
                    - self.js_files = self.get_files_by_extension('.js')

                - Please use the JSFileLocalizer class as a sample class for the WebAppJSFileHandler class with the following differences in the WebAppJSFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the JSFileLocalizer class as appropriate for the WebAppJSFileHandler class:
                        - localize_js_files()
                        - _process_js_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "js-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "js-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_js_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the JSFileLocalizer class:
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppJSFileHandler that you deem appropriate for its functionalities.




        - WebAppEJSFileHandler: class
            - The WebAppEJSFileHandler handles all EJS file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        re.compile(r'<%=\s*(.*?)\s*%>'),  # Matches rendered EJS content
                        ]

                    - self.ejs_files = self.get_files_by_extension('.ejs')

                - Please use the EJSFileLocalizer class as a sample class for the WebAppEJSFileHandler class with the following differences in the WebAppEJSFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the EJSFileLocalizer class as appropriate for the WebAppEJSFileHandler class:
                        - localize_ejs_files()
                        - _process_ejs_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "ejs-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "ejs-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_ejs_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the EJSFileLocalizer class:
                            - _duplicate_ejs_file()
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppEJSFileHandler that you deem appropriate for its functionalities.




        - WebAppJSXFileHandler: class
            - The WebAppJSXFileHandler handles all JSX file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        Please put here appropriate Regular Expression patterns appropriate for JSX translatable strings targetting. 
                        ]
                    
                    - self.jsx_files = self.get_files_by_extension('.jsx')

                - Please use an imaginary JSXFileLocalizer class imitating the previous sample classes as a sample class for the WebAppJSXFileHandler class with the following differences in the WebAppJSXFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the JSXFileLocalizer class as appropriate for the WebAppJSXFileHandler class:
                        - localize_jsx_files()
                        - _process_jsx_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "jsx-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "jsx-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_jsx_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the JSXFileLocalizer class:
                            - _duplicate_jsx_file()
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppJSXFileHandler that you deem appropriate for its functionalities.




        - WebAppTSFileHandler: class
            - The WebAppTSFileHandler handles all TS file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>{1}\s*(.*?)\s*<{1}'),         # Matches HTML content between tags
                        ]
                    - Please adjust the above patterns to fit for use in a Typescript (TS) file if necessary since the above was copied from a TSX file. 

                    - self.ts_files = self.get_files_by_extension('.ts')
                
                - Please understand that the sample class provided is a TSX specific code. Hence understand the TSXFileLocalizer as the TSFileLocalizer provided above and adjust any necessary changes and requirements to fit TS code.

                - Please use the TSFileLocalizer class as a sample class for the WebAppTSFileHandler class with the following differences in the WebAppTSFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the TSFileLocalizer class as appropriate for the WebAppTSFileHandler class:
                        - localize_ts_files()
                        - _process_ts_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "ts-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "ts-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_ts_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the TSFileLocalizer class:
                            - _duplicate_ts_file()
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppTSFileHandler that you deem appropriate for its functionalities.




        - WebAppTSXFileHandler: class
            - The WebAppTSXFileHandler handles all TSX file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        re.compile(r'(["\'])(?:(?=(\\?))\2.)*?\1'),  # Matches simple strings in quotes
                        re.compile(r'`(?:\\.|[^`\\])*`'),            # Matches template literals
                        re.compile(r'>{1}\s*(.*?)\s*<{1}'),         # Matches HTML content between tags
                        ]
                    
                    - self.tsx_files = self.get_files_by_extension('.tsx')

                - Please use the TSXFileLocalizer class as a sample class for the WebAppTSXFileHandler class with the following differences in the WebAppTSXFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the TSXFileLocalizer class as appropriate for the WebAppTSXFileHandler class:
                        - localize_tsx_files()
                        - _process_tsx_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "tsx-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "tsx-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_tsx_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the TSXFileLocalizer class:
                            - _duplicate_tsx_file()
                            - _set_lang_attribute()
                            - _insert_navigation_links()
                            - _get_locale_file_path()
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppTSXFileHandler that you deem appropriate for its functionalities.




        - WebAppVueFileHandler: class
            - The WebAppVUEFileHandler handles all VUE file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.translatable_patterns = [
                        Please put here appropriate Regular Expression patterns appropriate for VUE translatable strings targetting. 
                        ]
                    
                    - self.vue_files = self.get_files_by_extension('.vue')

                - Please use an imaginary VUEFileLocalizer class imitating the previous sample classes as a sample class for the WebAppVUEFileHandler class with the following differences in the WebAppVUEFileHandler:
                    - Adopt the following functions logic in definition, calling, and usage from the VUEFileLocalizer class as appropriate for the WebAppVUEFileHandler class:
                        - localize_vue_files()
                        - _process_vue_file() using show_progress() of parent class.
                        - _mark_translatable_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path". Do not include the "vue-str-" and similar  parts of the keys in this class. 
                        - _extract_and_save_strings() but use the inherited generate_key() or generate_namespaced_key() functions instead of uuid.uuid4() based on SettingManager get_key_format() is equal to "Simple Key" or "Namespaced Key with File Path" to add the file path to key or not. Do not include the "vue-str-" and similar  parts of the keys in this class.  
                        - Use save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                        - _save_vue_file() 
                        - _insert_i18next_import()
                        - DO NOT implement nor use the following functions and logics from the VUEFileLocalizer class:
                            - _duplicate_vue_file()
                            - _write_report()
                        
                        - Please make sure all the other requirements are met by the WebAppVUEFileHandler that you deem appropriate for its functionalities.




        - WebAppJSONFileHandler: class
            - The WebAppJSONFileHandler handles all JSON file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - self.json_files = self.get_files_by_extension('.json')

                - Please understand that the WebAppJSONFileHandler class only implements the logic to duplicate JSON files for each target locale saved using the save_resource_file() function inherited from WebAppFileHandler class.
                - Adopt the following functions and logics:
                    - save_resource_file() from parent class instead of _save_json_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                    - _duplicate_json_file() to be used inside save_resource_file() if necessary to duplicate the JSON files for each target locale after saving them for the source locale. 
                    
                    - Please make sure all the other requirements are met by the WebAppJSONFileHandler that you deem appropriate for its functionalities.




        - WebAppCSVFileHandler: class
            - The WebAppCSVFileHandler handles all CSV file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - self.csv_files = self.get_files_by_extension('.csv')

                - Please understand that the WebAppCSVFileHandler class only implements the logic to duplicate CSV files for each target locale saved using the save_resource_file() function inherited from WebAppFileHandler class.
                - Adopt the following functions and logics:
                    - save_resource_file() from parent class instead of _save_csv_file() with similar logic. Please not that language_code, country_code = locale[2], locale[3] is not required because locale has a "code" attribute that has value as "en-US" combining both language_code and country_code in the same string. Use the "code" attribute of the locale or locale[2] to represent the code attribute. 
                    - _duplicate_csv_file() to be used inside save_resource_file() if necessary to duplicate the CSV files for each target locale after saving them for the source locale. 
                    
                    - Please make sure all the other requirements are met by the WebAppCSVFileHandler that you deem appropriate for its functionalities.




NOTE: The android_localizers, ios_localizers, and java_localizers modules classes will be defined later. 
        



Classes: app_ui module classes and starter file:

    App's starter file:

    - autoloc.py file:
        - The autoloc.py file is the only entry point of the AutoLoc app.
        - It calls the MainAppWindow and executes the Application to render the app's UI.
        - It is the AutoLoc app's only allowed entry point of execution.




    - MainAppWindow Class:
        - The MainAppWindow is the main class of the AutoLoc app. It consolidates all the other classes logic in one place. It is the only class called in the autoloc.py file to start and run the app. 
        - It calls the AppManager and the DBManager to execute startup procedures as the first procedures of the app.
        - It makes sure the AppManager passes on all its startup procedures without any failure before any other process is allowed on the app.
        - It defines the AutoLoc app's main layout which includes the following layouts with their corresponding widgets:
            - main_layout: MainAppWindow's layout 
            - header_layout: in main_layout to accommodate HeaderWidget
            - body_layout: inside main_layout to accommodate side_bar_layout and panel_layout
            - side_bar_layout: in main_layout to accommodate SideBarWidget
            - panel_layout: in main_layout to accommodate any QWidget, QStackedWidget, and QTabWidget of the app 
            - footer_layout: in main_layout to accommodate FooterWidget
            - Note: the panel_layout will accommodate any other QWidget class defined below.
            - Please read the attached AutoLoc_App_Design PDF document to see how the MainAppWindow layouts are designed. 
    


    - HeaderWidget class
        - The HeaderWidget class is a QWidget class that defines the layout and components of the app's header widget meant to be rendered in the header_layout of the MainAppWindow class. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the HeaderWidget layouts and components are designed. 




    - SideBarWidget class
        - The SideBarWidget class is a QWidget class that defines the layout and components of the app's sidebar widget meant to be rendered in the side_bar_layout of the MainAppWindow class.

        - It defines all the sidebar buttons as the main menu items of the app.  

        - Please read the attached AutoLoc_App_Design PDF document to see how the SideBarWidget layouts and components are designed. 




    - FooterWidget class
        - The FooterWidget class is a QWidget class that defines the layout and components of the app's footer widget meant to be rendered in the footer_layout of the MainAppWindow class.

        - It defines all the labels shown in the app's footer.  

        - Please read the attached AutoLoc_App_Design PDF document to see how the FooterWidget layouts and components are designed. 




    - HomeWidget class
        - The HomeWidget class is a QWidget class that defines the layout and components of the app's home widget meant to be rendered in the panel_layout of the MainAppWindow class.

        - It renders a banner image for the app.  

        - Please read the attached AutoLoc_App_Design PDF document to see how the HomeWidget layouts and components are designed. 




    - SettingsStackedWidget class
        - The SettingsStackedWidget class is a QWidget class that defines the layout and components of the app's settings stacked widget meant to be rendered in the panel_layout of the MainAppWindow class.

        - It renders in a stack all the following QWidget classes:
            - SettingsWidget class
            - LocalesWidget class
            - LocaleWidget class
            - AddLocaleWidget class
            - UpdateLocaleWidget class

        - It defines the following buttons in the stack_buttons_layout:
            - "General" to point to SettingsWidget
            - "Locales" to point LocalesWidget
            - "Add Locale" to point to AddLocaleWidget

        - Please read the attached AutoLoc_App_Design PDF document to see how the SettingsStackedWidget layouts and components are designed following the sample for "Any QStackedWidget". 



    
    - SettingsWidget class
        - The SettingsWidget class is a QWidget class that defines the layout and components of the app's settings widget meant to be rendered in the SettingsStackedWidget class.

        - It uses the SettingManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Form with the following:
            - Label: Dark Mode, Data: QCheckBox where checked = SettingManager.set_ui_mode('Dark Mode') and unchecked = SettingManager.set_ui_mode('Light Mode')
            - Label: Localization Setting, Data: QCheckBox where checked = SettingManager.set_html_is_duplicated('True') and unchecked = SettingManager.set_html_is_duplicated('False'), Data: key_format QRadio where "Simple Key" if selected will update SettingManager.set_key_format('Simple Key') and "Namespaced Key with File Path" if selected will update SettingManager.set_key_format('Namespaced Key with File Path')

        - Please read the attached AutoLoc_App_Design PDF document to see how the SettingsWidget layouts and components are designed. 




    - LocalesWidget class
        - The LocalesWidget class is a QWidget class that defines the layout and components of the app's locales widget meant to be rendered in the SettingsStackedWidget class.

        - It uses the SettingManager class for all its CRUD and relevant functionalities.

        - It renders a Table Data with the following:
            - Table Column Names:
                - Name 
                - Code 
            - Table Rows Data:
                - Each locale's name 
                - Each locale's code 
            
            - The "Add" button renders the AddLocaleWidget class in the stack.
            - The "Delete All" button shows a QMessageBox with a warning message with 2 buttons:
                - "Delete All": will delete all locales records in the DB
                - "Cancel": will abort the deletion of records. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the LocalesWidget layouts and components are designed. 




    - LocaleWidget class
        - The LocaleWidget class is a QWidget class that defines the layout and components of the app's one locale widget meant to be rendered in the SettingsStackedWidget class.

        - It uses the SettingManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data with the following:
            - Labels:
                - Name 
                - Code 
            - Data:
                - The locale's name 
                - The locale's code
            
            - The "Add" button renders the AddLocaleWidget class in the stack.
            - The "Delete" button shows a QMessageBox with a warning message with 2 buttons:
                - "Delete": will delete the specific locale record in the DB
                - "Cancel": will abort the deletion of the record.

        - Please read the attached AutoLoc_App_Design PDF document to see how the LocaleWidget layouts and components are designed. 




    - AddLocaleWidget class
        - The AddLocaleWidget class is a QWidget class that defines the layout and components of the app's adding one locale widget meant to be rendered in the SettingsStackedWidget class.

        - It uses the SettingManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Add Form with the following:
            - Labels:
                - Name 
                - Code 
            - Data:
                - The locale's name 
                - The locale's code
            - Submit button under the form to submit the form data to the DB
            
            - The "Cancel" button aborts adding and renders the LocalesWidget class in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the AddLocaleWidget layouts and components are designed. 




    - UpdateLocaleWidget class
        - The UpdateLocaleWidget class is a QWidget class that defines the layout and components of the app's updating one locale widget meant to be rendered in the SettingsStackedWidget class.

        - It uses the SettingManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Update Form with the following:
            - Labels:
                - Name 
                - Code 
            - Data:
                - The locale's name 
                - The locale's code
            - Submit button under the form to submit the form data to the DB
            
            - The "Cancel" button aborts updating and renders the LocaleWidget being updated in its Object Data record in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the UpdateLocaleWidget layouts and components are designed. 




    - ProjectsStackedWidget class
        - The ProjectsStackedWidget class is a QStackedWidget class that defines the layout and components of the app's projects stacked widget meant to be rendered in the panel_layout of the MainAppWindow class.

        - It renders in a stack all the following QWidget classes:
            - ProjectsWidget class
            - ProjectWidget class
            - AddProjectWidget class
            - UpdateProjectWidget class

        - It defines the following buttons in the stack_buttons_layout:
            - "Projects" to point to ProjectsWidget
            - "Add Project" to point AddProjectWidget

        - Please read the attached AutoLoc_App_Design PDF document to see how the ProjectsStackedWidget layouts and components are designed following the sample for "Any QStackedWidget".




    - ProjectsWidget class
        - The ProjectsWidget class is a QWidget class that defines the layout and components of the app's projects widget meant to be rendered in the ProjectsStackedWidget class.

        - It uses the ProjectManager class for all its CRUD and relevant functionalities.

        - It renders a Table Data with the following:
            - Table Column Names:
                - Name 
                - Client
                - Status 
                - Start Date 
                - End Date 

            - Table Rows Data:
                - Each project's name (this should be a link to the specific project opening in ProjectWidget)
                - Each project's client 
                - Each project's status 
                - Each project's start date 
                - Each project's end date  
            
            - The "Add" button renders the AddProjectWidget class in the stack.
            - The "Delete All" button shows a QMessageBox with a warning message with 2 buttons:
                - "Delete All": will delete all projects records in the DB
                - "Cancel": will abort the deletion of records. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the ProjectsWidget layouts and components are designed. 




    - ProjectWidget class
        - The ProjectWidget class is a QWidget class that defines the layout and components of the app's one project widget meant to be rendered in the ProjectsStackedWidget class.

        - It uses the ProjectManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data with the following:
            - Labels:
                - Name 
                - Unique ID 
                - Client
                - Description 
                - Status 
                - Start Date 
                - End Date 
                - Last Updated Date 
                - Lead Engineer 
            - Data:
                - The project's name
                - The project's unique ID 
                - The project's client 
                - The project's description
                - The project's status 
                - The project's start date 
                - The project's end date
                - The project's last updated date 
                - The project's lead engineer 
            
            - The "Add" button renders the AddProjectWidget class in the stack.
            - The "Delete" button shows a QMessageBox with a warning message with 2 buttons:
                - "Delete": will delete the specific project's record in the DB
                - "Cancel": will abort the deletion of the record.

        - Please read the attached AutoLoc_App_Design PDF document to see how the ProjectWidget layouts and components are designed. 





    - AddProjectWidget class
        - The AddProjectWidget class is a QWidget class that defines the layout and components of the app's adding one project widget meant to be rendered in the ProjectsStackedWidget class.

        - It uses the ProjectManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Add Form with the following:
            - Labels:
                - Name 
                - Unique ID 
                - Client
                - Description 
                - Status 
                - Start Date 
                - End Date 
                - Last Updated Date 
                - Lead Engineer 
            - Data:
                - The project's name
                - The project's unique ID 
                - The project's client 
                - The project's description
                - The project's status 
                - The project's start date 
                - The project's end date
                - The project's last updated date 
                - The project's lead engineer 
            - Submit button under the form to submit the form data to the DB
            
            - The "Cancel" button aborts adding and renders the ProjectsWidget class in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the AddProjectWidget layouts and components are designed. 




    - UpdateProjectWidget class
        - The UpdateProjectWidget class is a QWidget class that defines the layout and components of the app's updating one project widget meant to be rendered in the ProjectsStackedWidget class.

        - It uses the ProjectManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Update Form with the following:
            - Labels:
                - Name 
                - Unique ID 
                - Client
                - Description 
                - Status 
                - Start Date 
                - End Date 
                - Last Updated Date 
                - Lead Engineer 
            - Data:
                - The project's name
                - The project's unique ID 
                - The project's client 
                - The project's description
                - The project's status 
                - The project's start date 
                - The project's end date
                - The project's last updated date 
                - The project's lead engineer 
            - Submit button under the form to submit the form data to the DB
            
            - The "Cancel" button aborts updating and renders the ProjectsWidget class in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the UpdateProjectWidget layouts and components are designed. 




    - SourceCodesStackedWidget class
        - The SourceCodesStackedWidget class is a QStackedWidget class that defines the layout and components of the app's source codes stacked widget meant to be rendered in the panel_layout of the MainAppWindow class.

        - It renders in a stack all the following QWidget classes:
            - SourceCodesWidget class
            - SourceCodeWidget class
            - AddSourceCodeWidget class
            - UpdateSourceCodeWidget class
            - SourceCodeTargetLocalesWidget class
            - SourceCodeTargetLocaleWidget class 
            - AddSourceCodeTargetLocaleWidget class 
            - UpdateSourceCodeTargetLocaleWidget class
            - L10nWidget class 


        - It defines the following buttons in the stack_buttons_layout:
            - "Source Codes" to point to SourceCodesWidget
            - "Add Source Code" to point AddSourceCodeWidget

        - Please read the attached AutoLoc_App_Design PDF document to see how the SourceCodesStackedWidget layouts and components are designed following the sample for "Any QStackedWidget".




    - SourceCodesWidget class
        - The SourceCodesWidget class is a QWidget class that defines the layout and components of the app's source codes widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders a Table Data with the following:
            - Table Column Names:
                - Project ID
                - Name 
                - Type 
                - Source Locale
                - Target Locales 
                - Status 

            - Table Rows Data:
                - Each source code's name (this should be a link to the specific source code opening in SourceCodeWidget)
                - Each source code's project name  
                - Each source code's name 
                - Each source code's type
                - Each source code's source locale code
                - Each source code's target locales codes in comma-separated list
                - Each source code's status 
            
            - Buttons in form_buttons_layout: 
                - The "Add" button renders the AddSourceCodeWidget class in the stack.
                - The "Delete All" button shows a QMessageBox with a warning message with 2 buttons:
                    - "Delete All": will delete all source codes records in the DB
                    - "Cancel": will abort the deletion of records. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the SourceCodesWidget layouts and components are designed. 




    - SourceCodeWidget class
        - The SourceCodeWidget class is a QWidget class that defines the layout and components of the app's one source code widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data with the following:
            - Labels:
                - Project ID
                - Name 
                - Unique ID 
                - Type
                - Source Locale 
                - Original Code Path 
                - Commons Paths 
                - Localized Code Path 
                - Status 
                - Notes 
            - Data:
                - The source code's Project ID (showing Project's Name: Unique ID in a select field to select)
                - The source code's Name
                - The source code's unique ID 
                - The source code's client 
                - The source code's description
                - The source code's status 
                - The source code's notes 
            
            - Buttons in form_buttons_layout: 
                - The "Add" button renders the AddSourceCodeWidget class in the stack.
                - The "Delete" button shows a QMessageBox with a warning message with 2 buttons:
                    - "Delete": will delete the specific source code's record in the DB
                    - "Cancel": will abort the deletion of the record.
                - The "Localize" button renders the L10nWidget with this SourceCode's ID. The L10nWidget class is defined later below. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the SourceCodeWidget layouts and components are designed. 




    - AddSourceCodeWidget class
        - The AddSourceCodeWidget class is a QWidget class that defines the layout and components of the app's adding one source code widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Add Form with the following:
            - Labels:
                - Project ID
                - Name 
                - Unique ID 
                - Type
                - Source Locale 
                - Original Code Path 
                - Commons Paths 
                - Localized Code Path 
                - Status 
                - Notes 
            - Data:
                - The source code's Project ID (showing Project's Name: Unique ID in a select field to select)
                - The source code's Name
                - The source code's unique ID 
                - The source code's client 
                - The source code's description
                - The source code's status 
                - The source code's notes 

            - Submit button under the form to submit the form data to the DB
            
            - Buttons in form_buttons_layout: 
                - The "Cancel" button aborts adding and renders the SourceCodesWidget class in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the AddSourceCodeWidget layouts and components are designed. 




    - UpdateSourceCodeWidget class
        - The UpdateSourceCodeWidget class is a QWidget class that defines the layout and components of the app's updating one source code widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Update Form with the following:
            - Labels:
                - Project ID
                - Name 
                - Unique ID 
                - Type
                - Source Locale 
                - Original Code Path 
                - Commons Paths 
                - Localized Code Path 
                - Status 
                - Notes 
            - Data:
                - The source code's Project ID (showing Project's Name: Unique ID in a select field to select)
                - The source code's Name
                - The source code's unique ID 
                - The source code's client 
                - The source code's description
                - The source code's status 
                - The source code's notes

            - Submit button under the form to submit the form data to the DB
            
            - Buttons in form_buttons_layout: 
                - The "Cancel" button aborts updating and renders back the SourceCodeWidget object being updated in the stack.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the UpdateSourceCodeWidget layouts and components are designed. 




    - SourceCodeTargetLocalesWidget class
        - The SourceCodeTargetLocalesWidget class is a QWidget class that defines the layout and components of the app's source code target locales widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders a Table Data with the following:
            - Table Column Names:
                - Source Code ID 
                - Name 
                - Code
                - Action 

            - Table Rows Data:
                - Each traget locale's source code Name: Unique ID (this should be a link to the specific source code opening in SourceCodeWidget)
                - Each source code target locale's name (this should be a link to the specific source code target locale opening in SourceCodeTargetLocaleWidget)
                - Each source code target locale's code 
                - Each source code target locale's "Delete" button to delete the specific source code target locale from the source code's records in DB  
            
            - Buttons in form_buttons_layout: 
                - The "Add" button renders the AddSourceCodeTargetLocaleWidget class in the stack. The button click should pick along the source code's ID to the AddSourceCodeTargetLocaleWidget as argument. 
                - The "Delete All" button shows a QMessageBox with a warning message with 2 buttons:
                    - "Delete All": will delete all source code target locales records in the DB for the specific source code by ID.
                    - "Cancel": will abort the deletion of records. 

        - Please read the attached AutoLoc_App_Design PDF document to see how the SourceCodeTargetLocalesWidget layouts and components are designed. 




    - SourceCodeTargetLocaleWidget class
        - The SourceCodeTargetLocaleWidget class is a QWidget class that defines the layout and components of the app's one source code target locale widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data with the following:
            - Labels:
                - Source Code ID 
                - Name 
                - Code
                - Action 
            - Data:
                - The traget locale's source code Name: Unique ID (this should be a link to the specific source code opening in SourceCodeWidget)
                - The source code target locale's name (this should be a link to the specific source code target locale opening in SourceCodeTargetLocaleWidget)
                - The source code target locale's code
            
            - Buttons in form_buttons_layout: 
                - The "Add" button renders the AddSourceCodeTargetLocaleWidget class in the stack. This button's click should take along the source code's ID as argument to the AddSourceCodeTargetLocaleWidget. 
                - The "Delete" button shows a QMessageBox with a warning message with 2 buttons:
                    - "Delete": will delete the specific source code target locale's record in the DB
                    - "Cancel": will abort the deletion of the record.

        - Please read the attached AutoLoc_App_Design PDF document to see how the SourceCodeTargetLocaleWidget layouts and components are designed. 




    - AddSourceCodeTargetLocaleWidget class
        - The AddSourceCodeTargetLocaleWidget class is a QWidget class that defines the layout and components of the app's adding one source code target locale widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Add Form with the following:
            - Labels:
                - Source Code ID 
                - Name 
                - Code
                - Action 
            - Data:
                - The traget locale's source code Name: Unique ID (automatically added from th source code's ID)
                - The source code target locale's name (this should be a select field)
                - The source code target locale's code (auto-updated select field based on the source code's name selection)

            - Submit button under the form to submit the form data to the DB
            
            - Buttons in form_buttons_layout: 
                - The "Cancel" button aborts adding and renders the SourceCodeTargetLocalesWidget class in the stack using the source code's ID too.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the AddSourceCodeTargetLocaleWidget layouts and components are designed. 




    - UpdateSourceCodeTargetLocaleWidget class
        - The UpdateSourceCodeTargetLocaleWidget class is a QWidget class that defines the layout and components of the app's updating one source code target locale widget meant to be rendered in the SourceCodesStackedWidget class.

        - It uses the SourceCodeManager class for all its CRUD and relevant functionalities.

        - It renders an Object Data Update Form with the following:
            - Labels:
                - Labels:
                - Source Code ID 
                - Name 
                - Code
                - Action 
            - Data:
                - The traget locale's source code Name: Unique ID (automatically added from th source code's ID)
                - The source code target locale's name (this should be a select field)
                - The source code target locale's code (auto-updated select field based on the source code's name selection)
            - Submit button under the form to submit the form data to the DB
            
            - Buttons in form_buttons_layout: 
                - The "Cancel" button aborts updating and renders back the SourceCodeTargetLocaleWidget object being updated in the stack using the source code's ID too.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the UpdateSourceCodeTargetLocaleWidget layouts and components are designed. 
    


    - L10nWidget class:
        - The L10nWidget displays the localization process for each source code based on source code ID. It takes in the source code ID as argument and parse it to the L10nManager class to handle the localization procedures appropriate for the source code. 

        - It uses the L10nManager class for all its CRUD and relevant functionalities.

        - It is a QWidget class that defines the layout and components of the app's localization process widget meant to be rendered in the SourceCodesStackedWidget class.
            
        - Please read the attached AutoLoc_App_Design PDF document to see how the L10nWidget layouts and components are designed. 




    - Styles class 
        - The Styles class of the AutoLoc app defines the CSS for styling all the layouts, widgets, buttons, labels, and other components of the app. 

        - It is called in any QWidget class requiring styling. 


