Requirements Specification for the AutoLoc App:

Overview:

AutoLoc is a sophisticated app designed for automating the localization process of websites and mobile apps. It extracts all translatable texts from the website's or mobile app's source code across various file types and converts them into locale resource files, facilitating easy translation. The application is developed using PySide6 Python framework and other relevant Python libraries.

Key Features:

Automatic Text Extraction:

Supports multiple file types.
Extracts translatable texts into resource files for each specified file type.
Users can define which file types to localize.

Localized Text Rendering:

The extracted texts in the appropriate format can be rendered back into the website or mobile app, maintaining the correct localization.

Class-based File Handling:

Each file type has a specific class that manages its localization process, ensuring appropriate handling according to file type characteristics.

Installation and Compatibility:

Compatible with all major operating systems.
Includes an installer that handles the installation of all dependencies.
The app is accessible via a UI icon, making it user-friendly and easy to execute.

App Code File Structure:

The following definitions describe the source code structure of the AutoLoc app:

- AutoLoc

    - app_ui
        - main_app_window.py
            - MainAppWindow: class
        - header.py 
            - HeaderWidget: class 
        - side_bar.py 
            - SideBarWidget: class
        - footer.py 
            - FooterWidget: class
        - panel.py 
            - PanelWidget: class 
        - settings.py
            - SettingsWidget: class 
            - LocalesWidget: class
            - LocaleWidget: class
            - AddLocaleWidget: class
            - UpdateLocaleWidget: class       
        - projects.py
            - ProjectsWidget: class
            - ProjectWidget: class
            - AddProjectWidget: class
            - UpdateProjectWidget: class
        - source_codes.py
            - SourceCodesWidget: class
            - SourceCodeWidget: class
            - AddSourceCodeWidget: class
            - UpdateSourceCodeWidget: class
            - SourceCodeTargetLocalesWidget: class 
            - SourceCodeTargetLocaleWidget: class 
            - AddSourceCodeTargetLocaleWidget: class 
            - UpdateSourceCodeTargetLocaleWidget: class 
        - l10n.py 
            - L10nWidget: class 
        - slyles.py 
            - Styles: class 

    - managers
        - app_manager.py
            - AppManager: class
        - db_manager.py
            - DBManager: class
        - setting_manager.py
            - SettingManager: class
        - project_manager.py 
            - ProjectManager: class
        - source_code_manager.py 
            - SourceCodeManager: class 
        - file_manager.py
            - FileManager: class 
        - l10n_manager.py 
            - L10nManager: class 

    - localizers
        - web_localizers
            - web_app_based_localizer.py 
                - WebAppBasedLocalizer: class
            - web_app_file_handler.py 
                - WebAppFileHandler: class
            - web_app_html_file_handler.py 
                - WebAppHTMLFileHandler: class
            - web_app_js_file_handler.py 
                - WebAppJSFileHandler: class 
            - web_app_ejs_file_handler.py
                - WebAppEJSFileHandler: class 
            - web_app_jsx_file_handler.py
                - WebAppJSXFileHandler: class 
            - web_app_ts_file_handler.py 
                - WebAppTSFileHandler: class 
            - web_app_tsx_file_handler.py 
                - WebAppTSXFileHandler: class
            - web_app_vue_file_handler.py 
                - WebAppVueFileHandler: class 
            - web_app_json_file_handler.py 
                - WebAppJSONFileHandler: class 
            - web_app_csv_file_handler.py 
                - WebAppCSVFileHandler: class

        - android_localizers
            - android_app_based_localizer.py 
                - AndroidAppBasedLocalizer: class
            - android_app_file_handler.py 
                - AndroidAppFileHandler: class 
            - android_app_xml_file_handler.py 
                - AndroidAppXMLFileHandler: class
            - android_app_java_file_handler.py 
                - AndroidAppJavaFileHandler: class 
            - android_app_kotlin_file_handler.py 
                - AndroidAppKotlinFileHandler: class 

        - ios_localizers
            - ios_app_based_localizer.py
                - IOSAppBasedLocalizer: class
            - ios_app_file_handler.py 
                - IOSAppFileHandler: class 
            - ios_app_swift_file_handler.py 
                - IOSAppSwiftFileHandler: class 
            - ios_app_objc_m_file_handler.py 
                - IOSAppObjcMFileHandler: class 
            - ios_app_objc_h_file_handler.py 
                - IOSAppObjcHFileHandler: class 
            - ios_app_strings_file_handler.py 
                - IOSAppStringsFileHandler: class
            - ios_app_storyboard_file_handler.py 
                - IOSAppStoryboardFileHandler: class
            - ios_app_xib_file_handler.py 
                - IOSAppXIBFileHandler: class
            - ios_app_plist_file_handler.py 
                - IOSAppPListFileHandler: class
            
        - java_localizers
            - java_app_based_localizer.py
                - JavaAppBasedLocalizer: class 
            - java_app_xhtml_file_handler.py
                - JavaAppXHTMLFileHandler: class 
            - java_app_xml_file_handler.py
                - JavaAppXMLFileHandler: class 
            - java_app_java_file_handler.py
                - JavaAppJavaFileHandler: class 
            - java_app_properties_file_handler.py
                - JavaAppPropertiesFileHandler: class 
            
    - autoloc.py (app's starter)


Code and Functionality Definitions:

Class Definitions:

The following is the definition of each class's functionality and implementation logic. The classes are developed in the following logical order to faciliate a smooth definition of the interrelationship among them. Inheritances will be explicitly defined by indicating which class inherits which class in the following definiton. Each class's functionality will also be described and finetuned as appropriate during the course of development. The logical order in which classes are defined is as follows:
- managers module classes
- localizers module classes
- app_ui module classes 




Classes: managers module classes:

    - AppManager class:
        - The AppManager ensures the following at the AutoLoc app startup:
            - There must be a "[Host OS User Data Directory]AutoLoc/" directory created during the app's installation in the host operating system (OS). The AppManager checks if this directory exists, otherwise it creates it. 

            - The AppManager checks if there is an "autoloc.db" file inside the "[Host OS User Data Directory]AutoLoc/Data/DB/" directory created during installation of the app on the host OS, otherwise, it creates it at app startup by calling the DBManager to create the DB file.

            - The AppManager handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class if there is any Exception/Error preventing the above procedures.
        
        - The AppManager is responsible for any OS specific definitions such as the creation of the "[Host OS User Data Directory]AutoLoc/Data/" directory based on the host OS the app is running. The [Host OS User Data Directory] represents any OS (Windows, Mac, and Linux) user data directory.

        - It also defines and executes the following functions and functionalities:

            - initialize_app() function which checks and makes sure of the above. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - The initialize_app() function may call any number of other functions of the AppManager class to do its tasks.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed in the MainAppWindow class that will call this class and its functions.
    


    - DBManager class:
        - Executes the following at its initialization:

            - Creates an SQLite DB file and save it as "[Host OS User Data Directory]AutoLoc/DB/autoloc.db".

            - Runs the create_db() function that creates the SQLite DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in the MainAppWindow class.

            - Runs the create_tables() function that creates the default tables of the DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - Runs the insert_records() function that inserts all default table records in the DB. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - Please understand that the QMessageBoxes are not created within this class but only the exceptions/errors strings returned by the functions to be displayed later in a QWidget class that will call this class and its functions.

        - Creates the following tables if not exist in the create_tables() function:

            - ui_modes:
                - id (primary key, autoincrement)
                - mode ("Light Mode" or "Dark Mode" - default = Light Mode)

            
            - l10n_settings:
                - id (primary key, autoincrement)
                - html_is_duplicated (True, False, default=False)


            - locales:
                - id (primary key, autoincrement)
                - name (English (United States))
                - code (en-US)
                - UNIQUE(name, code)
            

            - projects:
                - id (primary key, autoincrement)
                - name
                - unique_id (hidden field, autogenerated in code logic)
                - client
                - description
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress"
                - start_date
                - end_date
                - last_updated_date
                - lead_egineer 
                - UNIQUE(name, client, unique_id)


            - source_codes:
                - id (primary key, autoincrement)
                - project_id
                - name
                - unique_id (hidden field, autogenerated in code logic using datetime as "YYYYMMDDHis")
                - type (Web, Android, iOS, Java App)
                - source_locale (ja-JP, en-US, zh-CN)
                - original_source_code_path (Nullable and hidden field to be set by the FileManager class later)
                - commons_paths (Nullable and hidden field to be set by the FileManager class later)
                - localized_source_code_path (Nullable and hidden field to be set by the FileManager class later)
                - status ("In Progress", "Completed", "On Hold", "Terminated") - default = "In Progress" 
                - notes (Nullable and optional)
                - UNIQUE(project_id, name, unique_id, source_locale)
                - FOREIGN KEY(project_id) REFERENCES projects(id)
            

            - source_code_target_locales:
                - id (primary key, autoincrement)
                - name
                - code
                - source_code_id
                - UNIQUE(name, code, source_code_id)
                - FOREIGN KEY(source_code_id) REFERENCES source_codes(id)
            

        - Inserts the following records in the insert_records() function:
            - ui_modes = [
                ('Light Mode'),
                ('Dark Mode')
            ]

            - l10n_settings = [
                ('False')
            ]

            - locales = [
                ('Japanese', 'ja-JP'),
                ('English (US)', 'en-US'),
                ('Simplified Chinese (CN)', 'zh-CN'),
                ('Traditional Chinese (TW)', 'zh-TW'),
                ('Korean (South Korea)', 'ko-KR')
            ]
        
        - Defines the reset_db() function to delete and recreate the DB file, the tables, and the default records. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Defines the following functions for general data management of any table in the DB:

            - get_record() to get any record from any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - get_records() to get all records from any table in a list. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - insert_record() to insert any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class. 

            - update_record() to update any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_record() to delete any record in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

            - delete_records() to delete all records in any table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox in an external QWidget class.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.
        
    

    - SettingManager class:
        - The SettingManager uses the DBManager to define and execute certain CRUD functionalities. It defines and manages the CRUD functionality for the app_settings tables in the DB using the DBManager methods.

        - It creates and manages the following functions and functionalities:

            - set_ui_mode() function to toggle the app's UI mode between "Light Mode" and "Dark Mode" in the app_settings table, ui_mode column. This function uses the Styles class of the app_ui module to set the Light or Dark mode of the Styles class.

            - set_html_is_duplicated() function to toggle the setting of html_is_duplicated column value in l10n_settings table in the DB to either True or False.

            - html_is_duplicated() function to return the value of html_is_duplicated column of the l10n_settings table in the DB. 

            - reset_db() function call from the DBManager to execute its logic. This function is just a wrapper function for the DBManager's reset_db() function. 

            - get_locales() to get all the locales from the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_locale() to get any specific locale from the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - add_locale() to add a new locale record to the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - update_locale() to update any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - delete_locale() to delete any locale record in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            _ delete_locales() to delete all locales in the locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - ProjectManager class:
        - It manages all the projects in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the projects table in the DB.

        - It defines and execute the following functions and functionalities:

            - get_projects() to get all the projects from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_project() to get any specific project from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - add_project() to add a new project record to the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_project() to update any project record in the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.  

            - delete_project() to delete any project record from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_projects() to delete all projects from the projects table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.  

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - SourceCodeManager class:
        - It manages all the source codes in the AutoLoc app.

        - It uses the DBManager to define and execute all CRUD functionalities for the source_codes table in the DB.

        - It takes in project_id argument at initialization.

        - It defines and execute the following functions and functionalities:

            - get_source_codes() to get all the source_codes of a specific project from the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_source_code() to get any specific source_code from the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - add_source_code() to add a new source_code record for a specific project to the source_codes table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_source_code() to update any source_code record of a specific project in the source_codes table. It also uses FileManager class to delete and replace the source_code files with the new submitted file path's contents. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - delete_source_code() to delete any source_code record of a specific project from the source_codes table. It also deletes the source_code's files using the FileManager class passing the source_code_id to it. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_source_codes() to delete all source_codes of a specific project from the source_codes table. It also deletes the source_codes' files using the FileManager class passing the source_code_id to it for each iteration.This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_source_locale() to get the source_code source locale from the source_code's record. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_target_locales() to get all the source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - get_source_code_target_locale() to get any specific source_code_target_locale from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - add_source_code_target_locale() to add a new source_code_target_locale record for a specific source_code to the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - update_source_code_target_locale() to update any source_code_target_locale record of a specific source_code in the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - delete_source_code_target_locale() to delete any source_code_target_locale record of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            _ delete_source_code_target_locales() to delete all source_code_target_locales of a specific source_code from the source_code_target_locales table. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.

            

    - FileManager class:
        - The FileManager defines and executes all file management procedures of the app except the default "[Host OS User Data Directory]AutoLoc/Data/" directory creation handled by the AppManager class. 
        - It inherits the SourceCodeManager class.
        - It uses the project's and the source code's unique_id fields in the creation of the original_source_code_path and the localized_source_code_path variables.
        - It defines and executes the following functions and functionalities:

            - Execute the following at initialization:
                - Define variables:
                    - source_code_upload_path 
                    - original_source_code_path
                    - localized_source_code_path
                    - source_code_commons_paths list 
                
                - Call the following functions:
                    - get_source_code()
                    - set_source_code_paths()
                    - set_source_code_commons_paths()

            
            - get_source_code_files(source_code_upload_path) function to get the source code from the AddSourceCodeWidget class form's file dialog for a path. This function should also check if the provided path is empty or has files in it. If the path has files, this function should call copy_source_code_files() function to copy all the source code files according to its logic. 
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

            - set_source_code_paths() function to perform the following only if source_code_upload_path is not empty:
                - Initialize and assign the veriables:
                    - original_source_code_path = "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Original_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.

                    - localized_source_code_path = "[Host OS User Data Directory]AutoLoc/Data/[Project_Name]_[Project_Unique_ID]/Localized_Source_Codes/[Source_Code_Name]_[Source_Code_Unique_ID]/" directory.
                
                - Update the following records for the source code based on its ID in the DB:
                    - original_source_code_path
                    - localized_source_code_path
                
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - set_source_code_commons_paths(commons_paths list) function to perform the following only if commons_paths is not empty:
                - Initialize and assign the veriable:
                    - source_code_commons_paths = commons_paths
                
                - Update the following record for the source code based on its ID in the DB:
                    - source_code_commons_paths
                
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_original_source_code_path() function to get and return a specific project source code's original_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_localized_source_code_path() function to get and return a specific project source code's localized_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - get_source_code_commons_paths() function to get and return a specific project source code's source_code_commons_paths list. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

            - copy_source_code_files(source_code_upload_path) funtion to copy all the files from the source_code_upload_path maintaining the directories and files patterns of the source code into the original_source_code_path.
            It then copies all the contents of the original_source_code_path to the localized_source_code_path. This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.



    - L10nManager class:
        - The L10nManager defines and executes all localization management procedures of the app. 
        - It inherits the FileManager class.
        - It defines and executes the following functions and functionalities:
            - reset_l10n() function to delete all the contents of the localized_source_code_path and then copy all the contents of the original_source_code_path to the localized_source_code_path. 
            
            - localize_source_code() function to do the following:

                - Calls the reset_l10n() function to delete and recopy all the contents of the localized_source_code_path from the original_source_code_path. 

                - Calls the required classes from the localizers module to localize the files based on the source code's "type" attribute value. The specific class from the localizers module is called based on the "type" attribute of the source code as follows:
                    - if type = "Web App", then WebAppBasedLocalizer is called 
                    - if type = "Android App", then AndroidAppBasedLocalizer is called 
                    - if type = "iOS App", then IOSAppBasedLocalizer is called 
                    - if type = "Java App", then JavaAppBasedLocalizer is called
            When the function calls the appropriate class based on the source code's type attribute value, it passes it all the required arguments to initialize and execute its localization logic.  
            This function handles and returns all possible exceptions and errors displayable later in a QMessageBox. 

        - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.




Classes: localizers module classes:

    - web_localizers sub-module classes:

        - WebAppBasedLocalizer class:
            - The WebAppBasedLocalizer is the class responsible for localizing the source code having type = "Web App".
            - It inherits the FileManager class.
            - It implements and executes the following functions and functionalities:
                - get_file_type_counts() function to get all the file paths from the original_source_code_path and count each file type based on their file extension and record the count of each file extension in a the dictionary it returns.

                - process_l10n() function that gets the dictionary returned from get_file_type_counts() function and if it is not empty, it executes the required file handler class for every file extension whose count is greater than zero. It uses if statements to control which classes gets executed only when its corresponding file extension count is greater than zero. If all none of the file extension counts is greater than zero, then this function throws and returns the necessary errors/exceptions. 
                This function handles and returns all possible exceptions and errors displayable later in a QMessageBox.
            
            - Please understand that the QMessageBoxes are not created within this class. This class only creates and returns the exceptions/errors strings through its functions to be displayed later in any corresponding QWidget class that will call this class's functions.
    


        - WebAppFileHandler class: 
            - The WebAppFileHandler class is the base class for all web app file type handler classes. 
            - It inherits FileManager class 
            - It implements and executes the following functions and functionalities:
                - It initializes the SettingManager class and assign a variable to use some of its functions. 

                - It defines and creates locales_path variable as localized_source_code_path/locales/ at initialization.

                - get_locales_path() function to return the locales folder path. 

                - get_files_by_extension(extension) function to get and return all the file paths of the files with the parsed extension argument from the localized_source_code_path.

                - generate_key() function to generate and return a unique string identifier key that will be assigned to either "data-i18n" attributes of HTML files, or non-namespaced keys in localized files. The key generated should be in the format: "str-1", "str-2", "str-3", etc. continuously attaching the number sequence during the process to "str".

                - generate_namespaced_key(file_path) function to generate and return a unique string identifier key that will either be assigned to "data-i18n" attributes of HTML files, or replace the extracted strings from the file being processed. The file_path is the file being processed. The key generated should be in the format: "file_path:unique_id" where unique_id is in the format: "str-1", "str-2", "str-3", etc. continuously attaching the number sequence during the process to "str". 

                - save_resource_file(data, locale, file, locale_type) function to save an extracted file's strings in JSON data format to a JSON file for the specified locale. The parameters are explained as follows: 
                    - :param data: The JSON data to save.
                    - :param locale: The locale information.
                    - :param file: The path to the file being processed.
                    - :param locale_type: The type of locale ('source' or 'target')
                The functions saves the JSON resource file as locales_path/[locale's code]/[file's path without the extension].json. The [locale's code] stand for any locale code such as ja-JP, en-US, zh-CN, etc. for each locale (either source or target locale) specified in the parameters. The [file's path without extension] stands for the file's path being processed but without its extension (e.g. removing the .html) and replace the extension with .json and save the JSON data inside the JSOn file created and saved to the locales folder. 

                - show_progress(files) function to send a QSignal to the L10nWidget class showing the progress in percentage of how many files have been successfully processed. The progress is displayed in a QProgressbar with white colored bar showing a progressive green color filling from left to right based on how much percentage has been completed of the processed files from 0% to 100%. The files parameter is a list of file paths.
        


        - WebAppHTMLFileHandler class:
            - The WebAppHTMLFileHandler handles all HTML file-specific localization procedures. 
            - It inherits the WebAppFileHandler class.
            - It implements and executes the following functions and functionalities:

                - It defines the following variables at initialization:

                    - self.target_tags = ['title', 'div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'pre', 'blockquote', 'li', 'figcaption', 'caption', 'td', 'th', 'label', 'option']
                    
                    - self.special_tags = ['meta', 'img']

                    - self.nav_tags = ['a', 'button']
                    
                    - self.formatting_tags = ['span', 'br', 'b', 'strong', 'i', 'em', 'mark', 'small', 'del', 'ins', 'sub', 'sup', 'u', 's', 'abbr', 'code', 'kbd', 'samp', 'var', 'cite', 'q', 'dfn', 'time', 'bdi', 'bdo', 'ruby', 'rt', 'rp', 'wbr']

                    - self.html_files = self.get_files_by_extension('.html')
                
                - It uses the self.show_progress(self.html_files) to show the processed files progressbar in L10nWidget class. 

                - localize_files() function to encapsulate the procedures to localize every HTML file as for example:
                    for html_file in self.html_files:
                        self._process_html_file(html_file)
                
                - _process_html_file(html_file) function should use the self.show_progress() function inherited from the parent class to display the progressbar for the processed files.
        


        



Classes: app_ui module classes and starter file:

    App's starter file:

    - autoloc.py file:
        - The autoloc.py file is the only entry point of the AutoLoc app.
        - It calls the MainAppWindow and executes the Application to render the app's UI.
        - It is the AutoLoc app's only allowed entry point of execution.




    - MainAppWindow Class:
        - The MainAppWindow is the main class of the AutoLoc app. It consolidates all the other classes logic in one place. It is the only class called in the autoloc.py file to start and run the app. 
        - It calls the AppManager and the DBManager to execute startup procedures as the first procedures of the app.
        - It makes sure the AppManager passes on all its startup procedures without any failure before any other process is allowed on the app.
        - It defines the AutoLoc app's main layout which includes the following layouts with their corresponding widgets:
            - main_layout: MainAppWindow's layout 
            - header_layout: in main_layout to accommodate HeaderWidget
            - side_bar_layout: in main_layout to accommodate SideBarWidget
            - footer_layout: in main_layout to accommodate FooterWidget
            - panel_layout: in main_layout to accommodate PanelWidget
            - The PanelWidget will accommodate any other QWidget class defined below. 
            - An image showing each QWidget's layout and internal widget components will be provided for its design and functionalities.


